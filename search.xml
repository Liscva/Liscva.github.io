<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>优雅记录程序执行时间工具</title>
      <link href="2020/12/07/java/%E5%B0%8F%E6%8A%80%E5%B7%A7/%E4%BC%98%E9%9B%85%E8%AE%B0%E5%BD%95%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E5%B7%A5%E5%85%B7/"/>
      <url>2020/12/07/java/%E5%B0%8F%E6%8A%80%E5%B7%A7/%E4%BC%98%E9%9B%85%E8%AE%B0%E5%BD%95%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>在spring.core包中有一个叫StopWatch的工具。用来记录程序的执行时间，通过该工具类，我们可以很优雅的记录或者打印执行时间日志</p><p>在springboot启动日志中时常能见到这么一行打印springboot启动时长的日志，那么他是怎么来的呢？</p><p>![image-20201207102757679](List快速转Map (copy)/image-20201207102757679.png)</p><p>在SpringAppliction的run方法中，声明了一个stopWatch，然后在StareupInfoLogger中对这个对象进行了输出处理</p><p>![image-20201207102839812](List快速转Map (copy)/image-20201207102839812.png)</p><p>![image-20201207102903464](List快速转Map (copy)/image-20201207102903464.png)</p><p>然后我们再写个测试用例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StopWatch<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * User: 李诗诚 * Date: 2020/12/7 * Time: 10:08 * Description: 优雅的记录程序的执行时间 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StopWatchTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        StopWatch stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"task1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stopWatch<span class="token punctuation">.</span><span class="token function">getTotalTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"task2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stopWatch<span class="token punctuation">.</span><span class="token function">getTotalTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stopWatch<span class="token punctuation">.</span><span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>![image-20201207103116334](List快速转Map (copy)/image-20201207103116334.png)</p><p>值得注意的是，spring 5版本默认输出的是纳秒，早期版本是毫秒，不过无伤大雅，StopWatch内部也有转换方法</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> StopWatch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3.0 函数组件模板</title>
      <link href="2020/11/19/vue/vue3.0%20%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E6%A8%A1%E6%9D%BF%20/"/>
      <url>2020/11/19/vue/vue3.0%20%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E6%A8%A1%E6%9D%BF%20/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 函数式组件， 该组件会返回鼠标在屏幕上的坐标值</span><span class="token comment" spellcheck="true">// toFefs 是将 reactive 对象的所有 key 都转化为 ref 值</span><span class="token comment" spellcheck="true">// 这样，在引入使用的组件中，就可以 用 const { x, y } = xx 来使用这些 key 对应的 value 了</span><span class="token keyword">import</span> <span class="token punctuation">{</span> onMounted<span class="token punctuation">,</span> onUnmounted<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">// 这里导出，就不是对象，而是一个函数了。</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义一个准备导出的对象数据</span>  <span class="token keyword">const</span> position <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 定义一个会改变数据的函数</span>  <span class="token keyword">const</span> update <span class="token operator">=</span> page <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    position<span class="token punctuation">.</span>x <span class="token operator">=</span> page<span class="token punctuation">.</span>pageX    position<span class="token punctuation">.</span>y <span class="token operator">=</span> page<span class="token punctuation">.</span>pageY  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 使用生命周期，绑定和移除事件</span>  onMounted <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  onUnmounted <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将 reactive 对象 转化为 ref 响应式的值，并返回</span>  <span class="token keyword">return</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span>    鼠标 x 轴 坐标 <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span>    鼠标 y 轴 坐标 <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> y <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// 引用我们开发的子组件</span><span class="token keyword">import</span> Position <span class="token keyword">from</span> <span class="token string">'@/components/Position.js'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  setup <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 引用函数子组件并展开它的值</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">Position</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将他的值 return 出去</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3.0 插槽模板</title>
      <link href="2020/11/19/vue/vue3.0%20%E6%8F%92%E6%A7%BD%E6%A8%A1%E6%9D%BF/"/>
      <url>2020/11/19/vue/vue3.0%20%E6%8F%92%E6%A7%BD%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>table<span class="token operator">></span>    <span class="token operator">&lt;</span>tr<span class="token operator">></span>      <span class="token operator">&lt;</span>th<span class="token operator">></span>默认插槽：<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>      <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>slot <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span>tr<span class="token operator">></span>      <span class="token operator">&lt;</span>th<span class="token operator">></span>具名插槽：<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>      <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span>tr<span class="token operator">></span>      <span class="token operator">&lt;</span>th<span class="token operator">></span>传参插槽：<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>      <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"bottom"</span> <span class="token punctuation">:</span>color<span class="token operator">=</span><span class="token string">"color"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span>tr<span class="token operator">></span>      <span class="token operator">&lt;</span>th<span class="token operator">></span>传对象参插槽：<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>      <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"object"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"{ old, name }"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  setup <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>      old<span class="token punctuation">:</span> <span class="token number">34</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'FungLeo'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>Child<span class="token operator">></span>    这些文字将显示在组件默认插槽内    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>footer<span class="token operator">></span>      这里的文字会显示在组件的具名插槽内    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>bottom<span class="token operator">=</span><span class="token string">"scope"</span><span class="token operator">></span>      文字右边会有个颜色值 <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>scope<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>object<span class="token operator">=</span><span class="token string">"scope"</span><span class="token operator">></span>      文字右边会有多个数据 <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> 名字：<span class="token punctuation">{</span><span class="token punctuation">{</span>scope<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>，年龄：<span class="token punctuation">{</span><span class="token punctuation">{</span>scope<span class="token punctuation">.</span>old<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Child<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'@/components/child.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> Child <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3.0 子父级传递模板</title>
      <link href="2020/11/19/vue/vue3.0%20%E5%AD%90%E7%88%B6%E7%BA%A7%E4%BC%A0%E9%80%92%E6%A8%A1%E6%9D%BF/"/>
      <url>2020/11/19/vue/vue3.0%20%E5%AD%90%E7%88%B6%E7%BA%A7%E4%BC%A0%E9%80%92%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript">template<span class="token operator">></span>  <span class="token operator">&lt;</span>div    <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"my-button"</span>    <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span>"<span class="token punctuation">[</span>        type <span class="token operator">?</span> <span class="token template-string"><span class="token string">`my-button-type-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        size <span class="token operator">?</span> <span class="token template-string"><span class="token string">`my-button-size-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        disabled <span class="token operator">?</span> <span class="token string">'my-button-disabled'</span> <span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">]</span>"    <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"width ? `width: ${width};` : ''"</span>    @click<span class="token operator">=</span><span class="token string">"handleClick"</span>    <span class="token operator">></span>    <span class="token operator">&lt;</span>slot <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'MyButton'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 定义 props 入参的数据类型以及默认值，和 vue 2.0 是一致的</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'default'</span> <span class="token comment" spellcheck="true">// default primary</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    size<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'default'</span> <span class="token comment" spellcheck="true">// default medium small mini</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    disabled<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    width<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 拿 props, 可以从函数入参里面拿</span>  <span class="token comment" spellcheck="true">// emit 可以从第二个参数中展开获取</span>  setup <span class="token punctuation">(</span>props<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> disabled <span class="token punctuation">}</span> <span class="token operator">=</span> props    <span class="token keyword">const</span> <span class="token punctuation">{</span> emit <span class="token punctuation">}</span> <span class="token operator">=</span> ctx    <span class="token comment" spellcheck="true">// 将点击事件 emit 给父组件</span>    <span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token operator">!</span>disabled <span class="token operator">&amp;&amp;</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      handleClick    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span><span class="token operator">></span><span class="token punctuation">.</span>my<span class="token operator">-</span>button <span class="token punctuation">{</span>  display<span class="token punctuation">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span>text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span>  box<span class="token operator">-</span>sizing<span class="token punctuation">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span>line<span class="token operator">-</span>height<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  cursor<span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>user<span class="token operator">-</span>select<span class="token punctuation">:</span>none<span class="token punctuation">;</span>  border<span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>color<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token operator">&amp;</span> <span class="token operator">+</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>    margin<span class="token operator">-</span>left<span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">&amp;</span><span class="token operator">-</span>type <span class="token punctuation">{</span>    <span class="token operator">&amp;</span><span class="token operator">-</span><span class="token keyword">default</span> <span class="token punctuation">{</span>      border<span class="token operator">-</span>color<span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>background<span class="token punctuation">:</span> #f0f0f0<span class="token punctuation">;</span>color<span class="token punctuation">:</span> #<span class="token number">555</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">&amp;</span><span class="token operator">-</span>primary <span class="token punctuation">{</span>      border<span class="token operator">-</span>color<span class="token punctuation">:</span> #409eff<span class="token punctuation">;</span>background<span class="token punctuation">:</span> #409eff<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token operator">&amp;</span><span class="token operator">-</span>size <span class="token punctuation">{</span>    <span class="token operator">&amp;</span><span class="token operator">-</span><span class="token keyword">default</span> <span class="token punctuation">{</span>      padding<span class="token punctuation">:</span> 12px 15px<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">&amp;</span><span class="token operator">-</span>medium <span class="token punctuation">{</span>      padding<span class="token punctuation">:</span> 8px 12px<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">&amp;</span><span class="token operator">-</span>small <span class="token punctuation">{</span>      padding<span class="token punctuation">:</span> 5px 8px<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">&amp;</span><span class="token operator">-</span>mini <span class="token punctuation">{</span>        padding<span class="token punctuation">:</span> 3px 5px<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token operator">&amp;</span><span class="token operator">-</span>disabled <span class="token punctuation">{</span>    opacity<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">&amp;</span><span class="token punctuation">:</span>hover <span class="token punctuation">{</span>    opacity<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span>    这里是一个计数器 <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用子组件，并传一些值进去 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>MyButton <span class="token punctuation">:</span>type<span class="token operator">=</span><span class="token string">"btnType"</span> size<span class="token operator">=</span><span class="token string">"medium"</span> width<span class="token operator">=</span><span class="token string">"300px"</span> @click<span class="token operator">=</span><span class="token string">"countAdd"</span><span class="token operator">></span>      点这个按钮上面的数字会变    <span class="token operator">&lt;</span><span class="token operator">/</span>MyButton<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">// 引用我们开发的子组件</span><span class="token keyword">import</span> MyButton <span class="token keyword">from</span> <span class="token string">'@/components/MyButton.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 注册我们的子组件，这两步操作和 vue 2.0 一致。</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> MyButton <span class="token punctuation">}</span><span class="token punctuation">,</span>  setup <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 定义按钮默认 type 为 primary</span>    <span class="token keyword">const</span> btnType <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'primary'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> countAdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      count<span class="token punctuation">.</span>value<span class="token operator">++</span>      <span class="token comment" spellcheck="true">// 让按钮 type 在 primary 和 default 之前切换</span>      <span class="token keyword">const</span> types <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'primary'</span><span class="token punctuation">,</span> <span class="token string">'default'</span><span class="token punctuation">]</span>      btnType<span class="token punctuation">.</span>value <span class="token operator">=</span> types<span class="token punctuation">[</span>count<span class="token punctuation">.</span>value <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      count<span class="token punctuation">,</span>      btnType<span class="token punctuation">,</span>      countAdd    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3 计算属性模板</title>
      <link href="2020/11/19/vue/vue3.0%20%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E6%A8%A1%E6%9D%BF%20/"/>
      <url>2020/11/19/vue/vue3.0%20%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E6%A8%A1%E6%9D%BF%20/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>点这里去首页<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>  <span class="token operator">&lt;</span>hr<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span>    这里是一个计数器 <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span>    右边的数字是上面的数字的十倍 <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>bigCount<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span>    右边的数字是上面的数字的一百倍 <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>computeCount<span class="token punctuation">[</span><span class="token string">'100x'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span>    右边的数字是上面的数字的一千倍 <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>computeCount<span class="token punctuation">[</span><span class="token string">'1000x'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"countAdd"</span><span class="token operator">></span>点这个按钮上面的数字会变<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// 需要使用计算属性，也需要从 vue 中导出引入</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">// 导出依然是个对象，不过对象中只有一个 setup 函数</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  setup <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义一个 count 的响应式数据，并赋值为 0</span>    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 定义一个函数，修改 count 的值。</span>    <span class="token keyword">const</span> countAdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      count<span class="token punctuation">.</span>value<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算属性，使用计算函数并命名，然后在 return 中导出即可</span>    <span class="token keyword">const</span> bigCount <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 计算多个属性，可以通过返回一个对象的方式来实现</span>    <span class="token keyword">const</span> computeCount <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token string">'100x'</span><span class="token punctuation">:</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span>        <span class="token string">'1000x'</span><span class="token punctuation">:</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 导出一些内容给上面的模板区域使用</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      count<span class="token punctuation">,</span>      countAdd<span class="token punctuation">,</span>      bigCount<span class="token punctuation">,</span>      computeCount    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3生命周期模板</title>
      <link href="2020/11/19/vue/vue3.0%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A8%A1%E6%9D%BF/"/>
      <url>2020/11/19/vue/vue3.0%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>点这里去首页<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>  <span class="token operator">&lt;</span>hr<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span>    这里是一个计数器 <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"countAdd"</span><span class="token operator">></span>点击加数字<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// 你需要使用到什么生命周期，就引出来什么生命周期</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  onBeforeMount<span class="token punctuation">,</span>  onMounted<span class="token punctuation">,</span>  onBeforeUpdate<span class="token punctuation">,</span>  onUpdated<span class="token punctuation">,</span>  onBeforeUnmount<span class="token punctuation">,</span>  onUnmounted<span class="token punctuation">,</span>  ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// setup 函数，就相当于 vue 2.0 中的 created</span>  setup <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 其他的生命周期都写在这里</span>    onBeforeMount <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      count<span class="token punctuation">.</span>value<span class="token operator">++</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onBeforeMount'</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    onMounted <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      count<span class="token punctuation">.</span>value<span class="token operator">++</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onMounted'</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 注意，onBeforeUpdate 和 onUpdated 里面不要修改值，会死循环的哦！</span>    onBeforeUpdate <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onBeforeUpdate'</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    onUpdated <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onUpdated'</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    onBeforeUnmount <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      count<span class="token punctuation">.</span>value<span class="token operator">++</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onBeforeUnmount'</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    onUnmounted <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      count<span class="token punctuation">.</span>value<span class="token operator">++</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onUnmounted'</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 定义一个函数，修改 count 的值。</span>    <span class="token keyword">const</span> countAdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      count<span class="token punctuation">.</span>value<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      count<span class="token punctuation">,</span>      countAdd    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JHSDB：基于服务性代理的调试工具</title>
      <link href="2020/11/10/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JHSDB%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E6%80%A7%E4%BB%A3%E7%90%86%E7%9A%84%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
      <url>2020/11/10/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JHSDB%EF%BC%9A%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E6%80%A7%E4%BB%A3%E7%90%86%E7%9A%84%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>启动HSDB；</p><pre class=" language-shell"><code class="language-shell">PS D:\Program Files\Java\jdk1.8.0_192\bin> java -cp .\sa-jdi.jar sun.jvm.hotspot.HSDB</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> gc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * User: 李诗诚 * Date: 2020/11/10 * Time: 10:36 * Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JHSDB_TestCase</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>        <span class="token keyword">static</span> ObjectHolder objectHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 静态变量随Test信息存放在方法区</span>        ObjectHolder instanceHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 对象存放java</span>        <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ObjectHolder instanceHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 方法内对象存放在栈帧的局部变量表</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JHSDB_TestCase<span class="token punctuation">.</span>Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>限制堆大小，禁用压缩指针</p><p>-Xmx10m -XX:+UseSerialGC -XX:-UseCompressedOops</p><p>通过jps -l 查询到进程ID</p><pre class=" language-shell"><code class="language-shell">PS D:\Program Files\Java\jdk1.8.0_192\bin> jps -l12752 gc.JHSDB_TestCase38884128 com.unicom.microserv.cs.pvc.cert.CertificationApplication12964 org.jetbrains.jps.cmdline.Launcher1646867248692 sun.tools.jps.Jps8792 org.jetbrains.jps.cmdline.Launcher13132PS D:\Program Files\Java\jdk1.8.0_192\bin></code></pre><p>scanoops查找对象的内存地址</p><p>revotrs 查询对象的引用地址，无法查找栈帧内部，返回null</p><p>Inspector查看该对象实例</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用并发工具类</title>
      <link href="2020/11/03/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B8%B8%E7%94%A8%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>2020/11/03/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B8%B8%E7%94%A8%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Semaphore"><a href="#一、Semaphore" class="headerlink" title="一、Semaphore"></a>一、Semaphore</h1><p>Semaphore也就是信号量，提供了资源数量的并发访问控制</p><pre class=" language-java"><code class="language-java">Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始有10个共享资源，fair控制公平锁和非公平锁</span>semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前线程获取一个共享资源，如果共享资源不足，则线程阻塞</span>semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 当前线程释放共享资源</span></code></pre><h1 id="二、CountDownLatch"><a href="#二、CountDownLatch" class="headerlink" title="二、CountDownLatch"></a>二、CountDownLatch</h1><p>一个主线程要等待10个Worker 线程工作完毕才退出，就能使用CountDownLatch来实现，CountDownLatch没有公平或非公平之分</p><pre class=" language-java"><code class="language-java">CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//有2个工作线程</span>countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用方法的线程阻塞</span>countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 工作线程完成工作调用，当2个工作线程走完，所有调用await方法的线程会被唤醒</span></code></pre><h1 id="三、CyclicBarrier"><a href="#三、CyclicBarrier" class="headerlink" title="三、CyclicBarrier"></a>三、CyclicBarrier</h1><p>CyclicBarrier用于多阶段同步点，当所有线程到达同步点，也就是将10个资源都await了，就会进入·从新生成同步点，可以继续异步执行，同步获取</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    CyclicBarrier cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1阶段回调"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//声明3个进程，和一个回调函数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模拟多个线程</span>        <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 模拟随机线程中断</span>                        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread"</span><span class="token operator">+</span><span class="token punctuation">(</span>finalI <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"完成，进入同步点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 没个线程调用一次，代表自己做完了，进入同步点等待，等待其他所有线程调用完，进入下一环节</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread"</span><span class="token operator">+</span><span class="token punctuation">(</span>finalI <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"被中断唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//其他线程中断，我被唤醒</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"其他线程中断，"</span><span class="token operator">+</span><span class="token string">"Thread"</span><span class="token operator">+</span><span class="token punctuation">(</span>finalI <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"Thread"</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发工具IDEA必备插件</title>
      <link href="2020/11/02/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IDEA%E5%BF%85%E5%A4%87%E6%8F%92%E4%BB%B6/"/>
      <url>2020/11/02/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7IDEA%E5%BF%85%E5%A4%87%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>Rainbow Brackets ，就是彩虹括号，各种鲜明颜色的括号</p><p>jprofiler   性能监控插件，配合客户端使用</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于ReentrantLock的上锁和解锁机制</title>
      <link href="2020/10/30/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%85%B3%E4%BA%8EReentrantLock%E7%9A%84%E4%B8%8A%E9%94%81%E5%92%8C%E8%A7%A3%E9%94%81%E6%9C%BA%E5%88%B6/"/>
      <url>2020/10/30/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%85%B3%E4%BA%8EReentrantLock%E7%9A%84%E4%B8%8A%E9%94%81%E5%92%8C%E8%A7%A3%E9%94%81%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>一.进入ReentrantLock源码，我们发现ReentrantLock实现了Lock接口,在Lock接口中有如下方法</p><p><img src="/2020/10/30/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%85%B3%E4%BA%8EReentrantLock%E7%9A%84%E4%B8%8A%E9%94%81%E5%92%8C%E8%A7%A3%E9%94%81%E6%9C%BA%E5%88%B6/image-20201030095610388.png" alt="image-20201030095610388"></p><p>ReentrantLock实现了Lock接口，而具体的代码实现则是委托给了内部类<strong>Sync</strong>来实现，而<strong>Sync</strong>有2个子类，分别代表<strong>NonfairSync</strong>（非公平锁）和<strong>FairSync</strong>（公平锁）</p><p>这两个锁分别实现了父类Sync的lock抽象方法和超类AbstractQueuedSynchronizer的tryAcquire方法</p><p><img src="/2020/10/30/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%85%B3%E4%BA%8EReentrantLock%E7%9A%84%E4%B8%8A%E9%94%81%E5%92%8C%E8%A7%A3%E9%94%81%E6%9C%BA%E5%88%B6/image-20201030095914647.png" alt="image-20201030095914647"></p><p>在Sync继承实现链的最上级有个AbstractOwnableSynchronizer类，这个类中只有一个参exclusiveOwnerThread和参数的getset方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 记录当前锁持有的线程 */</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Thread exclusiveOwnerThread<span class="token punctuation">;</span></code></pre><p>在ReentrantLock的构造方法中，我们可以得知，可以通过参数来控制是公平锁还是非公平锁</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建一个ReentrantLock实例 * 默认为非公平锁 */</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 根据boolean参数创建一个ReentrantLock实例 * true为公平锁，false为非公平锁. * * @param fair {@code true} if this lock should use a fair ordering policy */</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在NonfairSync和FairSync中，分别实现了lock方法</p><p>NonfairSync中首先会调用compareAndSetState方法设置一个state。这个state是AbstractQueuedSynchronizer的一个变量，在使用ReentrantLock的情况下state是用来记录锁的标志数量，为0代表没有线程持有这个锁。如果这个时候有线程争到了锁，那么这个变量会+1。其他线程就知道这个锁有人了，就会被阻塞。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 这里使用CAS操作尝试将锁标志为由0变1，争锁，返回ture就代表设置成功</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成功了就会设置锁当前持有线程为自己</span>    <span class="token keyword">else</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 进入排队争锁一系列操作</span><span class="token punctuation">}</span></code></pre><p>而在FairSync中，则会直接进入acquire方法，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>进入acquire方法，首先执行的tryAcquire方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>   <span class="token comment" spellcheck="true">// 会尝试一次争锁，公平锁和非公平锁有各自的争锁实现</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//自我中断补偿</span><span class="token punctuation">}</span></code></pre><p>这个方法在<strong>FairSync</strong>和<strong>NonfairSync</strong>有各自的实现</p><p>在<strong>NonfairSync</strong>中，是直接转发的Sync的nonfairTryAcquire方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取当前线程</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取锁标志数量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果该锁没有持有线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//与公平锁不同，这里不用判断队列，直接试图修改锁标志数量</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 如果锁有线程，那么就判断线程是不是自己，也就是所谓的锁重入</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 如果线程是自己，就让锁标志数量+1，代表重入次数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 因为排他锁的缘故，这里直接调用set方法修改即可</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Thread </tag>
            
            <tag> Lock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lock和Condition</title>
      <link href="2020/10/26/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Lock%E5%92%8CCondition/"/>
      <url>2020/10/26/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Lock%E5%92%8CCondition/</url>
      
        <content type="html"><![CDATA[<h1 id="一-AbstractQueuedSynchronizer详解"><a href="#一-AbstractQueuedSynchronizer详解" class="headerlink" title="一.AbstractQueuedSynchronizer详解"></a>一.AbstractQueuedSynchronizer详解</h1><p>AQS（AbstractQueuedSynchronizer）是一个用于构建锁和同步器的框架，许多同步器都可以通过AQS很容易并且高效地构造出来。不仅ReentrantLock和Semaphore是基于AQS构建的，还包括CountDownLatch、ReentrantReadWriteLock、SynchronousQueue和FutureTask。</p><p>AQS里面最重要的就是两个操作和一个状态：获取操作（acquire）、释放操作（release）、同步状态（state）。两个操作通过各种条件限制，总共有8个重要的方法，6个获取方法，2个释放方法，如下：</p><ul><li>acquire(int)：独占模式的获取，忽略中断。</li><li>acquireInterruptibly(int)：独占模式的获取，可中断</li><li>tryAcquireNanos(int, long)：独占模式的获取，可中断，并且有超时时间。</li><li>release(int)：独占模式的释放。</li><li>acquireShared(int)：共享模式的获取，忽略中断。</li><li>acquireSharedInterruptibly(int)：共享模式的获取，可中断</li><li>tryAcquireSharedNanos(int, long)：共享模式的获取，可中断，并且有超时时间。</li><li>releaseShared(int)：共享模式的释放。</li></ul><p>以ReentrantLock独占模式为例，从ReentrantLock源码中开始</p><p><img src="/2020/10/26/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Lock%E5%92%8CCondition/image-20201027105533561.png" alt="image-20201027105533561"></p><p>ReentrantLock实例化默认是非公平锁，也可以通过参数来控制实例化公平锁还是非公平锁。</p><p>ReentrantLock的操作都是委托于sync来实现的</p><p><img src="/2020/10/26/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Lock%E5%92%8CCondition/image-20201027110248276.png" alt="image-20201027110248276"></p><p>公平锁和非公平锁分别有不同的争锁步骤</p><p>非公平锁：</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//非公平锁上锁时，会直接试图抢锁，锁标志状态修改成功的话，就意味着抢到了锁</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//设置锁持有者为当前线程</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token comment" spellcheck="true">//否者就会加入到双向链表队列中继续抢锁</span>                <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>公平锁</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//公平锁会直接加入到双向链表队列中</span>            <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>双向链表Node对象基础属性</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Marker to indicate a node is waiting in shared mode */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Node SHARED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 标记节点正在以共享模式等待</span>    <span class="token comment" spellcheck="true">/** Marker to indicate a node is waiting in exclusive mode */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Node EXCLUSIVE <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记节点正在以独占模式等待</span>    <span class="token comment" spellcheck="true">// 表示线程已取消：由于在同步队列中等待的线程等待超时或者被中断，</span>    <span class="token comment" spellcheck="true">// 需要从同步队列中取消等待，节点进入该状态将不会变化（即要移除/跳过的节点）</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 表示后继节点处于park，需要唤醒：后继节点的线程处于park，而当前节点的线</span>    <span class="token comment" spellcheck="true">// 程如果进行释放操作或者被取消，将会通知后继节点，使后继节点的线程得以运行</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SIGNAL    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 表示线程正在等待状态：即节点在等待队列中，节点线程等待在Condition上，</span>    <span class="token comment" spellcheck="true">// 当其他线程对Condition调用了signal()方法后，该节点将会从等待队列中转移到同步队列中</span>    <span class="token comment" spellcheck="true">//（即该节点的线程调用了Condition.await()方法，需要先唤醒才能进入同步队列）</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CONDITION <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 表示下一次共享模式同步状态获取讲会无条件地被传播下去</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PROPAGATE <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 即上面的CANCELLED/SIGNAL/CONDITION/PROPAGATE，初始状态为0</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待状态</span>    <span class="token keyword">volatile</span> Node prev<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前驱节点</span>    <span class="token keyword">volatile</span> Node next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 后继节点</span>    <span class="token keyword">volatile</span> Thread thread<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 节点的线程(获取同步状态的线程)</span>    <span class="token comment" spellcheck="true">// 条件队列（注意和同步队列区分）中的后继节点：参见addConditionWaiter方法，</span>    <span class="token comment" spellcheck="true">// 表示下一个等待Condition的Node，如果当前节点是共享的，那么这个字段将是一个        </span>    <span class="token comment" spellcheck="true">// SHARED常量，也就是说节点类型（独占和共享）和等待队列中的后继节点共用一个字段。</span>    Node nextWaiter<span class="token punctuation">;</span>     <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果节点在共享模式下等待，则返回true。</span>        <span class="token keyword">return</span> nextWaiter <span class="token operator">==</span> SHARED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回节点的前驱节点，如果为null，则抛出NullPointerException</span>    <span class="token keyword">final</span> Node <span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NullPointerException <span class="token punctuation">{</span>        Node p <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 用于创建头节点或SHARED标记</span>    <span class="token punctuation">}</span>    <span class="token function">Node</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">,</span> Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// Used by addWaiter</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> mode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Node</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">,</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Used by Condition</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>waitStatus <span class="token operator">=</span> waitStatus<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 同步队列的头节点，使用懒汉模式初始化。 除了初始化，它只能通过setHead方法修改。 </span><span class="token comment" spellcheck="true">// 注意：如果头节点存在，其waitStatus保证不是CANCELLED。</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 同步队列的尾节点，使用懒汉模式初始化。仅通过enq方法修改，用于添加新的等待节点。</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 同步状态, volatile修饰，很多同步类的实现都用到了该变量，</span><span class="token comment" spellcheck="true">// 例如：ReentrantLock、CountDownLatch等</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回当前的同步状态</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 设置同步状态值</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">int</span> newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> newState<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用CAS修改同步状态值</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// See below for intrinsics setup to support this</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>acquire方法在AbstractQueuedSynchronizer中</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * acquire方法调用的时候，会尝试一次争锁     * 如果失败了，就会调用acquireQueued方法，     * addWaiter将当前线程包装成一个node对象     * acquireQueued方法阻塞线程并将node对象放到队列中，在方法内部不停自旋争锁，出方法的方式就是抢到锁     * 争到锁就会唤醒，然后返回一个boolean值，这个值代表，在线程阻塞期间是否这个线程是否收到过中断请求     * 如果有，就将刚抢到锁的线程给中断掉，这也算一种补偿方式     *     * @param arg the acquire argument.  This value is conveyed to     *        {@link #tryAcquire} but is otherwise uninterpreted and     *        can represent anything you like.     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>   <span class="token comment" spellcheck="true">// 会尝试一次争锁，公平锁和非公平锁有各自的争锁实现</span>            <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//内部自旋争锁</span>            <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//自我中断补偿</span>    <span class="token punctuation">}</span></code></pre><p>同理还有tryLock（尝试上锁，失败了也不阻塞）和tryRelease（尝试解锁，解锁线程不为当前锁持有线程就会抛出IllegalMonitorStateException异常）方法</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程基础</title>
      <link href="2020/10/26/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>2020/10/26/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="一-线程启动"><a href="#一-线程启动" class="headerlink" title="一.线程启动"></a>一.线程启动</h1><p>Thread是java中操作线程的类,常用调用线程的方式有2中</p><ol><li>继承Thread类,重写run方法,</li><li>继承Runable接口,实现run方法</li></ol><p>不管哪种方式,最终启动线程都是由Thread的start方法来启动线程</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * User: 李诗诚 * Date: 2020/9/16 * Time: 9:30 * Description: 线程启动的2中方式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadStart</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadA threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadB threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 实现runable接口的类需要当做runable抽象传入到Thread中启动</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 继承Thread类可以直接调用start方法启动</span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadA</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * When an object implementing interface &lt;code>Runnable&lt;/code> is used         * to create a thread, starting the thread causes the object's         * &lt;code>run&lt;/code> method to be called in that separately executing         * thread.         * &lt;p>         * The general contract of the method &lt;code>run&lt;/code> is that it may         * take any action whatsoever.         *         * @see java.lang.Thread#run()         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我实现了Runnable接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadB</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我继承了Thread类,重写了run方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="二-线程关闭"><a href="#二-线程关闭" class="headerlink" title="二.线程关闭"></a>二.线程关闭</h1><p>在java中，有stop和destory方法可以强制杀死线程，但这些都是不推荐的，强制杀死线程会让线程所使用的资源不能正常关闭。</p><p>调用线程实例的interrupt（）方法，可以给线程发送中断信号，收到中断信号后，线程不会立即中断，而是会安全等待退出</p><p>能够被中断的阻塞称为轻量级阻塞，对应的线程状态是WAITING或者TIMED_WAITING；而像synchronized 这种不能被中断的阻塞称为重量级阻塞，对应的状态是BLOCKED</p><p><img src="/2020/10/26/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/image-20201026104800514.png" alt="image-20201026104800514"></p><h1 id="三-锁的本质"><a href="#三-锁的本质" class="headerlink" title="三.锁的本质"></a>三.锁的本质</h1><p>从程序角度来看，锁其实就是一个“对象”，这个对象要完成以下几件事情：</p><p>（1）这个对象内部得有一个标志位（state变量），记录自己有没有被某个线程占用（也就是记录当前有没有游客已经进入了房子）。最简单的情况是这个state有0、1两个取值，0表示没有线程占用这个锁，1表示有某个线程占用了这个锁。</p><p>（2）如果这个对象被某个线程占用，它得记录这个线程的thread ID，知道自己是被哪个线程占用了（也就是记录现在是谁在房子里面）。</p><p>（3）这个对象还得维护一个thread id list，记录其他所有阻塞的、等待拿这个锁的线程（也就是记录所有在外边等待的游客）。在当前线程释放锁之后（也就是把state从1改回0），从这个thread id list里面取一个线程唤醒。</p><p>Java的对象头里，有一块数据叫Mark Word。在64位机器上，Mark Word是8字节（64位）的，这64位中有2个重要字段：锁标志位和占用该锁的thread ID，还会有1位记录是否偏向</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js过滤特殊字符</title>
      <link href="2020/10/16/JS/js%E8%BF%87%E6%BB%A4%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/"/>
      <url>2020/10/16/JS/js%E8%BF%87%E6%BB%A4%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 过滤所有特殊字符</span><span class="token keyword">var</span> stripscript <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"[`~!@#$^&amp;*()=|{}':;',\\[\\].&lt;>/?~！@#￥……&amp;*（）——|{}【】‘；：”“'。，、？↵\r\n]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> rs <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rs <span class="token operator">=</span> rs <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rs<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM垃圾回收机制</title>
      <link href="2020/10/16/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BA%8C.JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>2020/10/16/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BA%8C.JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>在JMM中，虚拟机栈，本地方法栈，程序计数器3个区域的生命周期随线程的启动而启动，关闭而关闭。局部变量表,栈帧的分配的内存大小从编译期就已经确定了，只会出现由于申请不到足够的内存空间而抛出栈溢出，而不会出现OOM。</p><p>在java执行的过程中，因为某个分支条件不同，所需要的内存空间也不同，每个子类的内存空间也可能都不一样，这也就造成了，堆和方法区的内存可变。垃圾回收机制主要就是来管理这两个区域的</p><p>在java堆中，垃圾收集器主要回收的对象是<strong>各式各样创建的对象</strong>，要回收一个对象，就得知道这个对象是活着的还是死了的，这就涉及到下面算法。</p><p>大部分书上说的都是<strong>引用计数器法</strong>，<strong>每有一个引用了这个对象，计数器就+1，当计数器为0时，垃圾回收机制就会回收</strong>。计数器法需要大量判断才可以保证正常运行，而且会有个问题，当两个对象相互引用，而且两个对象已经死去，那么它们会被回收吗？</p><p>现今虚拟机绝大部分用的都是可达性算法，从GC ROOT开始，根据是否能达到这个对象，从而判断对象是否处于可达链中。当对象不可达时，GC不会立马给对象判死刑，而是先进行1次标记，然后判断这个对象是否重写了finalize方法在判断是否已经调用过一次finalize方法,如果你重写了finalize方法，那么系统在回收前会自动调用一次这个方法(只有一次，第二次直接跳过)，以供你清理一些东西。同时，只要你在这个方法中从新将对象链接上GC ROOT，那么垃圾收集器会在第二次标记的时候将对象从清理的集合中移除。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> gc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * User: 李诗诚 * Date: 2020/10/19 * Time: 10:16 * Description: 对象在处于不可达的并非一定会被回收，这个时候还是会有机会拯救，重写finalize方法，将自己从新链接到任意GC ROOT链中 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RescueGc</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RescueGc gcRootTreeNode <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finalize 方法被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将自己从新链接到任意GC ROOT链</span>        <span class="token comment" spellcheck="true">// 在收集器对对象的第二次标记时将会将对象移除出即将销毁的集合</span>        gcRootTreeNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一次自救成功</span>        gcRootTreeNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RescueGc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gcRootTreeNode <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 睡一会，等待finalzer线程执行finalize 方法</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gcRootTreeNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            gcRootTreeNode<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我死了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第二次自救失败，因为收集器判断finalize方法已经被执行过了，就不会进行第二次标记，直接杀死</span>        gcRootTreeNode <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 睡一会，等待finalzer线程执行finalize 方法</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gcRootTreeNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            gcRootTreeNode<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我死了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我还活着，没有被回收"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在JDK 1.2版之后，Java对引用的概念进行了扩充，将引用分为强引用（StronglyRe-ference）、软引用（Soft Reference）、弱引用（Weak Reference）和虚引用（Phantom Reference）4种。</p><p>这4种引用强度依次逐渐减弱。</p><ul><li>1.·强引用是最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“Object obj=new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</li><li>2·软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK 1.2版之后提供了SoftReference类来实现软引用。</li><li>3·弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2版之后提供了WeakReference类来实现弱引用。</li><li>4·虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供了PhantomReference类来实现虚引用。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一.jvm内存管理的区域划分</title>
      <link href="2020/10/15/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%80.jvm%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86/"/>
      <url>2020/10/15/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%80.jvm%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在java程序中,java程序员将内存的管理权限交给JVM来控制,不需要手动释放内存,不容易出现内存泄漏或者内存溢出的问题,看似方便的同时也带来了新的问题,一旦出现内存泄漏和内存溢出,若果不是特别了解JVM内存管理的开发人员是很难排查解决问题的,所以需要深入了解关于JVM内存管理这块的机制</p><p>解决问题是主要,延伸出来的就是jvm性能优化</p><table><thead><tr><th>常用术语</th><th>释义</th></tr></thead><tbody><tr><td>JVM</td><td>Java Virtual Machine（Java虚拟机)</td></tr><tr><td>JMM</td><td>Java Memory Model  (java内存模型)</td></tr><tr><td>OOM</td><td>OutOfMemoryError  (内存溢出异常)</td></tr></tbody></table><h3 id="一-运行时数据区域"><a href="#一-运行时数据区域" class="headerlink" title="一.运行时数据区域"></a>一.运行时数据区域</h3><p><img src="/2020/10/15/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%80.jvm%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86/image-20201016101737205.png" alt="image-20201016101737205"></p><p>JVM会在java程序运行中，将内存划分为多个区域，这些区域有着各自的用途、创建和销毁的时间,</p><p>有些区域会随着JVM存在而一直存在，有些区域则依赖于用户线程的启动和关闭</p><h4 id="1-程序计数器（Program-Counter-Register）"><a href="#1-程序计数器（Program-Counter-Register）" class="headerlink" title="1.程序计数器（Program Counter Register）"></a>1.程序计数器（Program Counter Register）</h4><p>线程在上下文切换的时候，CPU是怎么知道当前线程的下一条执行指定在哪，为了切换后能恢复到正确的执行位置，在JVM中每个线程有自己的程序计数器，程序计数器记录的是当前线程执行的字节码的行号。</p><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址，如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined)。</p><p>程序计数器为线程私有，这是唯一一块不会出现OOM的区域。</p><h4 id="2-java虚拟机栈（Java-Virtual-MachineStack）"><a href="#2-java虚拟机栈（Java-Virtual-MachineStack）" class="headerlink" title="2.java虚拟机栈（Java Virtual MachineStack）"></a>2.java虚拟机栈（Java Virtual MachineStack）</h4><p>它的生命周期与线程同步，虚拟机栈中描述的是当前线程的线程内存模型，所以也是线程私有的，在当前线程中,每个方法执行的时候，JVM会同步一个栈帧，栈帧用来存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用到执行完毕，就对应一次入栈到出栈</p><p>局部变量表中的大小是按局部变量槽（Solt）来分配的，在运行期间栈帧中的局部变量空间是完全确定的，不会更改，</p><p>每一个Solt的大小是由JVM来规定的，并非一定，其中64位的long和double会占用2个Solt</p><p>当栈的深度超过jvm规范的深度，就会抛出StackOverflowError异常，常见会出现在无限递归上面</p><p>当栈帧申请不到足够的局部变量空间时就会抛出OOM异常</p><h4 id="3-本地方法栈（Native-Method-Stacks）"><a href="#3-本地方法栈（Native-Method-Stacks）" class="headerlink" title="3.本地方法栈（Native Method Stacks）"></a>3.本地方法栈（Native Method Stacks）</h4><p>本地方法栈和虚拟机栈的作用几乎一致，不同的是虚拟机栈为JVM执行java方法（java字节码），而本地方法栈执行的是本地方法（Native）。</p><h4 id="4-java堆（Java-Heap）"><a href="#4-java堆（Java-Heap）" class="headerlink" title="4.java堆（Java Heap）"></a>4.java堆（Java Heap）</h4><p>java堆是最大的一片区域，为所有线程共有，Java世界里“几乎”所有的对象实例都在这里分配内存，垃圾回收机制主要管理的区域</p><h4 id="5-方法区（Method-Area）"><a href="#5-方法区（Method-Area）" class="headerlink" title="5.方法区（Method Area）"></a>5.方法区（Method Area）</h4><p>与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch template使用</title>
      <link href="2020/10/13/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/%E4%B8%89.elasticsearch%20template%E4%BD%BF%E7%94%A8/"/>
      <url>2020/10/13/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/%E4%B8%89.elasticsearch%20template%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是索引模板"><a href="#1-什么是索引模板" class="headerlink" title="1 什么是索引模板"></a>1 什么是索引模板</h1><blockquote><p>索引模板: 就是把已经创建好的某个索引的参数设置(settings)和索引映射(mapping)保存下来作为模板, 在创建新索引时, 指定要使用的模板名, 就可以直接重用已经定义好的模板中的设置和映射.</p></blockquote><h2 id="1-1-索引模板中的内容"><a href="#1-1-索引模板中的内容" class="headerlink" title="1.1 索引模板中的内容"></a>1.1 索引模板中的内容</h2><p>(1) settings: 指定index的配置信息, 比如分片数、副本数, tranlog同步条件、refresh策略等信息;</p><p>(2) mappings: 指定index的内部构建信息, 主要有:</p><blockquote><p>① <code>_all</code>: All Field字段, 如果开启, <code>_all</code>字段就会把所有字段的内容都包含进来,检索的时候可以不用指定字段查询 —— 会检索多个字段, 设置方式: <code>"_all": {"enabled": true}</code>;</p><blockquote><p>在ES 6.0开始, <code>_all</code>字段被禁用了, 作为替换, 可以通过<code>copy_to</code>自定义实现all字段的功能.</p></blockquote><p>② <code>_source</code>: Source Field字段, ES为每个文档都保存一份源数据, 如果不开启, 也就是<code>"_source": {"enabled": false}</code>, 查询的时候就只会返回文档的ID, 其他的文档内容需要通过Fields字段到索引中再次获取, 效率很低. 但若开启, 索引的体积会更大, 此时就可以通过Compress进行压缩, 并通过<code>inclueds</code>、<code>excludes</code>等方式在field上进行限制 —— 指定义允许哪些字段存储到<code>_source</code>中, 哪些不存储;</p><p>③ <code>properties</code>: <strong>最重要的配置</strong>, 是对索引结构和文档字段的设置.</p></blockquote><h2 id="1-2-索引模板的用途"><a href="#1-2-索引模板的用途" class="headerlink" title="1.2 索引模板的用途"></a>1.2 索引模板的用途</h2><p><strong>索引模板一般用在时间序列相关的索引中.</strong></p><p>—— 也就是说, 如果你需要每间隔一定的时间就建立一次索引, 你只需要配置好索引模板, 以后就可以直接使用这个模板中的设置, 不用每次都设置settings和mappings.</p><p><strong>索引模板一般与索引别名一起使用.</strong> 关于索引别名, 后续研究之后再做补充.</p><h1 id="2-创建索引模板"><a href="#2-创建索引模板" class="headerlink" title="2 创建索引模板"></a>2 创建索引模板</h1><p>创建一个商品的索引模板的示例:</p><p>(1) ES 6.0之前的版本:</p><pre class=" language-json"><code class="language-json">PUT _template/shop_template<span class="token punctuation">{</span>    <span class="token property">"template"</span><span class="token operator">:</span> <span class="token string">"shop*"</span><span class="token punctuation">,</span>       // 可以通过<span class="token string">"shop*"</span>来适配    <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                // 模板的权重<span class="token punctuation">,</span> 多个模板的时候优先匹配用<span class="token punctuation">,</span> 值越大<span class="token punctuation">,</span> 权重越高    <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token number">1</span>  // 分片数量<span class="token punctuation">,</span> 可以定义其他配置项    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"aliases"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"alias_1"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>          // 索引对应的别名    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"_default"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          // 默认的配置<span class="token punctuation">,</span> ES <span class="token number">6.0</span>开始不再支持            <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  // 是否保存字段的原始值            <span class="token property">"_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     // 禁用_all字段            <span class="token property">"dynamic"</span><span class="token operator">:</span> <span class="token string">"strict"</span>               // 只用定义的字段<span class="token punctuation">,</span> 关闭默认的自动类型推断        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"type1"</span><span class="token operator">:</span> <span class="token punctuation">{</span>             // 默认的文档类型设置为type1<span class="token punctuation">,</span> ES <span class="token number">6.0</span>开始只支持一种type<span class="token punctuation">,</span> 所以这里不需要指出        */            <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        // 字段的映射                <span class="token property">"@timestamp"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    // 具体的字段映射                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span><span class="token punctuation">,</span>                               <span class="token property">"format"</span><span class="token operator">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"@version"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"doc_values"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"not_analyzed"</span><span class="token punctuation">,</span>  // 不索引                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>          // string类型                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"logLevel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>(2) ES 6.0之后的版本:</p><pre class=" language-json"><code class="language-json">PUT _template/shop_template<span class="token punctuation">{</span>    <span class="token property">"index_patterns"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"shop*"</span><span class="token punctuation">,</span> <span class="token string">"bar*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       // 可以通过<span class="token string">"shop*"</span>和<span class="token string">"bar*"</span>来适配<span class="token punctuation">,</span> template字段已过期    <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                // 模板的权重<span class="token punctuation">,</span> 多个模板的时候优先匹配用<span class="token punctuation">,</span> 值越大<span class="token punctuation">,</span> 权重越高    <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token number">1</span>  // 分片数量<span class="token punctuation">,</span> 可以定义其他配置项    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"aliases"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"alias_1"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>          // 索引对应的别名    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        // ES <span class="token number">6.0</span>开始只支持一种type<span class="token punctuation">,</span> 名称为“_doc”        <span class="token property">"_doc"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            // 是否保存字段的原始值                <span class="token property">"enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        // 字段的映射                <span class="token property">"@timestamp"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    // 具体的字段映射                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span><span class="token punctuation">,</span>                               <span class="token property">"format"</span><span class="token operator">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"@version"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"doc_values"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">,</span>   // 设置为<span class="token boolean">false</span><span class="token punctuation">,</span> 不索引                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>      // text类型                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"logLevel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>说明:</p><blockquote><p><strong>直接修改mapping的优先级 &gt; 索引模板中的设置</strong>;</p><p>索引匹配了多个template, 当属性等配置出现不一致时, 以模板的权重(order属性的值)为准, 值越大越优先, order的默认值是0.</p><p>ES 6.0之后的版本API变化较大, 请重点关注.</p></blockquote><h1 id="3-查看索引模板"><a href="#3-查看索引模板" class="headerlink" title="3 查看索引模板"></a>3 查看索引模板</h1><p>(1) 查看示例:</p><pre class=" language-json"><code class="language-json">GET _template                // 查看所有模板GET _template/temp*          // 查看与通配符相匹配的模板GET _template/temp1<span class="token punctuation">,</span>temp2    // 查看多个模板GET _template/shop_template  // 查看指定模板</code></pre><p>(2) 判断模板是否存在:</p><p>判断示例:</p><pre class=" language-json"><code class="language-json">HEAD _template/shop_tem</code></pre><p>结果说明:</p><blockquote><p>a) 如果存在, 响应结果是: <code>200 - OK</code><br>b) 如果不存在, 响应结果是: <code>404 - Not Found</code></p></blockquote><h1 id="4-删除索引模板"><a href="#4-删除索引模板" class="headerlink" title="4 删除索引模板"></a>4 删除索引模板</h1><p>删除示例:</p><pre class=" language-json"><code class="language-json">DELETE _template/shop_template    // 删除上述创建的模板</code></pre><p>如果模板不存在, 将抛出如下错误:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"error"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"root_cause"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"index_template_missing_exception"</span><span class="token punctuation">,</span>        <span class="token property">"reason"</span> <span class="token operator">:</span> <span class="token string">"index_template [shop_temp] missing"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"index_template_missing_exception"</span><span class="token punctuation">,</span>    <span class="token property">"reason"</span> <span class="token operator">:</span> <span class="token string">"index_template [shop_temp] missing"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token number">404</span><span class="token punctuation">}</span></code></pre><h1 id="5-模板的使用建议"><a href="#5-模板的使用建议" class="headerlink" title="5 模板的使用建议"></a>5 模板的使用建议</h1><h2 id="5-1-一个index中不能有多个type"><a href="#5-1-一个index中不能有多个type" class="headerlink" title="5.1 一个index中不能有多个type"></a>5.1 一个index中不能有多个type</h2><p>—— Elasticsearch 6.X版本中已经不支持在同一个index下创建多个type.</p><blockquote><p>6.X之前的版本中, 父子文档的实现是一个索引中定义多个type, 6.X中实现方式改变为join方式.</p></blockquote><p>如果在同一个index下创建多个type, 会报出如下错误信息:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"error"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"root_cause"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"illegal_argument_exception"</span><span class="token punctuation">,</span>        <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"Rejecting mapping update to [book_shop] as the final mapping would have more than 1 type: [books, novel_book]"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"illegal_argument_exception"</span><span class="token punctuation">,</span>    <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"Rejecting mapping update to [book_shop] as the final mapping would have more than 1 type: [books, novel_book]"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">}</span></code></pre><p>错误信息指出: 拒绝对[book_shop]的mapping信息进行修改, 因为它作为final mapping(终态的mapping), 将会有超过2个type.</p><h2 id="5-2-设置-source-false"><a href="#5-2-设置-source-false" class="headerlink" title="5.2 设置_source = false"></a>5.2 设置_source = false</h2><p>如果我们只关心查询的评分结果, 而不用查看原始文档的内容, 就设置<code>"_source": {"enabled": false}</code>.</p><p>—— 这能节省磁盘空间并减少磁盘IO上的开销.</p><blockquote><p>我们可以把原始的数据存储在MySQL、HBase等数据库, 从ES中得到文档的ID之后, 再到相应的数据库中获取数据.</p></blockquote><h2 id="5-3-设置-all-false"><a href="#5-3-设置-all-false" class="headerlink" title="5.3 设置_all = false"></a>5.3 设置_all = false</h2><p>如果能够确切地知道要对哪个field做查询操作, 就设置<code>"_all": {"enabled": false}</code>.</p><p>—— 这能实现性能提升, 并节省存储空间.<br>而在6.X版本开始, <code>_all</code>字段也不再支持了, ES官方建议我们通过<code>copy_to</code>自定义我们自己的all字段.</p><h2 id="5-4-设置dynamic-strict"><a href="#5-4-设置dynamic-strict" class="headerlink" title="5.4 设置dynamic = strict"></a>5.4 设置dynamic = strict</h2><p>如果我们的数据是结构化数据, 就设置<code>"dynamic": "strict"</code>.</p><p>—— 把动态类型判断设置为严格, 也就是不允许ES为插入的数据进行动态类型设置, 避免注入脏数据.</p><h2 id="5-5-使用keyword类型"><a href="#5-5-使用keyword类型" class="headerlink" title="5.5 使用keyword类型"></a>5.5 使用keyword类型</h2><p>如果我们只关心精确匹配, 就设置<code>test_field: {"type": "keyword"}</code>.</p><p>—— keyword类型要比text类型的性能更高, 并且还能节省磁盘的存储空间.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索引擎 </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二.elasticsearch基本概念</title>
      <link href="2020/10/12/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/%E4%BA%8C.elasticsearch%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>2020/10/12/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/%E4%BA%8C.elasticsearch%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="Node-与-Cluster"><a href="#Node-与-Cluster" class="headerlink" title="Node 与 Cluster"></a>Node 与 Cluster</h3><p>Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。</p><p>单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。</p><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>Elastic 会索引所有字段，经过处理后写入一个反向索引（Inverted Index）。查找数据的时候，直接查找该索引。</p><p>所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。它是单个数据库的同义词。每个 Index （即数据库）的名字必须是小写。</p><p>下面的命令可以查看当前节点的所有 Index。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl -X GET <span class="token string">'http://localhost:9200/_cat/indices?v'</span></code></pre></blockquote><h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><p>Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。</p><p>Document 使用 JSON 格式表示，下面是一个例子。</p><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"user"</span><span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"工程师"</span><span class="token punctuation">,</span>  <span class="token string">"desc"</span><span class="token punctuation">:</span> <span class="token string">"数据库管理"</span><span class="token punctuation">}</span></code></pre></blockquote><p>同一个 Index 里面的 Document，不要求有相同的结构（scheme），但是最好保持相同，这样有利于提高搜索效率。</p><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><p>Document 可以分组，比如<code>weather</code>这个 Index 里面，可以按城市分组（北京和上海），也可以按气候分组（晴天和雨天）。这种分组就叫做 Type，它是虚拟的逻辑分组，用来过滤 Document。</p><p>不同的 Type 应该有相似的结构（schema），举例来说，<code>id</code>字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的<a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/mapping.html">一个区别</a>。性质完全不同的数据（比如<code>products</code>和<code>logs</code>）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。</p><p>下面的命令可以列出每个 Index 所包含的 Type。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl <span class="token string">'localhost:9200/_mapping?pretty=true'</span></code></pre></blockquote><p>根据<a href="https://www.elastic.co/blog/index-type-parent-child-join-now-future-in-elasticsearch">规划</a>，Elastic 6.x 版只允许每个 Index 包含一个 Type，7.x 版将会彻底移除 Type。</p><h1 id="新建和删除-Index"><a href="#新建和删除-Index" class="headerlink" title="新建和删除 Index"></a>新建和删除 Index</h1><p>新建 Index，可以直接向 Elastic 服务器发出 PUT 请求。下面的例子是新建一个名叫<code>weather</code>的 Index。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl -X PUT <span class="token string">'localhost:9200/weather'</span></code></pre></blockquote><p>服务器返回一个 JSON 对象，里面的<code>acknowledged</code>字段表示操作成功。</p><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"acknowledged"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string">"shards_acknowledged"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span></code></pre></blockquote><p>然后，我们发出 DELETE 请求，删除这个 Index。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl -X DELETE <span class="token string">'localhost:9200/weather'</span></code></pre></blockquote><h3 id="新增记录"><a href="#新增记录" class="headerlink" title="新增记录"></a>新增记录</h3><p>向指定的 /Index/Type 发送 PUT 请求，就可以在 Index 里面新增一条记录。比如，向<code>/accounts/person</code>发送请求，就可以新增一条人员记录。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl -H <span class="token string">"Content-Type: application/json"</span> -X PUT <span class="token string">'localhost:9200/weather/person/1'</span> -d <span class="token string">'{  "user": "张三",  "title": "工程师",  "desc": "数据库管理"}'</span> </code></pre></blockquote><p>服务器返回的 JSON 对象，会给出 Index、Type、Id、Version 等信息。</p><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"_index"</span><span class="token punctuation">:</span><span class="token string">"weather"</span><span class="token punctuation">,</span>  <span class="token string">"_type"</span><span class="token punctuation">:</span><span class="token string">"person"</span><span class="token punctuation">,</span>  <span class="token string">"_id"</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token string">"_version"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">"result"</span><span class="token punctuation">:</span><span class="token string">"created"</span><span class="token punctuation">,</span>  <span class="token string">"_shards"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"total"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"successful"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"failed"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"created"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span></code></pre></blockquote><p>如果你仔细看，会发现请求路径是<code>/weather/person/1</code>，最后的<code>1</code>是该条记录的 Id。它不一定是数字，任意字符串（比如<code>abc</code>）都可以。</p><p>新增记录的时候，也可以不指定 Id，这时要改成 POST 请求。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl -H <span class="token string">"Content-Type: application/json"</span> -X POST <span class="token string">'localhost:9200/weather/person'</span> -d <span class="token string">' { "user": "李四", "title": "工程师", "desc": "系统管理" }'</span> </code></pre></blockquote><p>上面代码中，向<code>/weather/person</code>发出一个 POST 请求，添加一个记录。这时，服务器返回的 JSON 对象里面，<code>_id</code>字段就是一个随机字符串。</p><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"_index"</span><span class="token punctuation">:</span><span class="token string">"accounts"</span><span class="token punctuation">,</span>  <span class="token string">"_type"</span><span class="token punctuation">:</span><span class="token string">"person"</span><span class="token punctuation">,</span>  <span class="token string">"_id"</span><span class="token punctuation">:</span><span class="token string">"AV3qGfrC6jMbsbXb6k1p"</span><span class="token punctuation">,</span>  <span class="token string">"_version"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">"result"</span><span class="token punctuation">:</span><span class="token string">"created"</span><span class="token punctuation">,</span>  <span class="token string">"_shards"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"total"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"successful"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"failed"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"created"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span></code></pre></blockquote><p>注意，如果没有先创建 Index（这个例子是<code>weather</code>），直接执行上面的命令，Elastic 也不会报错，而是直接生成指定的 Index。所以，打字的时候要小心，不要写错 Index 的名称。</p><h3 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h3><p>向<code>/Index/Type/Id</code>发出 GET 请求，就可以查看这条记录。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl <span class="token string">'localhost:9200/weather/person/1?pretty=true'</span></code></pre></blockquote><p>上面代码请求查看<code>/weather/person/1</code>这条记录，URL 的参数<code>pretty=true</code>表示以易读的格式返回。</p><p>返回的数据中，<code>found</code>字段表示查询成功，<code>_source</code>字段返回原始记录。</p><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"_index"</span> <span class="token punctuation">:</span> <span class="token string">"accounts"</span><span class="token punctuation">,</span>  <span class="token string">"_type"</span> <span class="token punctuation">:</span> <span class="token string">"person"</span><span class="token punctuation">,</span>  <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token string">"_version"</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">"found"</span> <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string">"_source"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"user"</span> <span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>    <span class="token string">"title"</span> <span class="token punctuation">:</span> <span class="token string">"工程师"</span><span class="token punctuation">,</span>    <span class="token string">"desc"</span> <span class="token punctuation">:</span> <span class="token string">"数据库管理"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><p>如果 Id 不正确，就查不到数据，<code>found</code>字段就是<code>false</code>。</p><h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><p>删除记录就是发出 DELETE 请求。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl -X DELETE <span class="token string">'localhost:9200/weather/person/1'</span></code></pre></blockquote><p>这里先不要删除这条记录，后面还要用到。</p><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><p>更新记录就是使用 PUT 请求，重新发送一次数据。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl -X PUT <span class="token string">'localhost:9200/weather/person/1'</span> -d <span class="token string">'{    "user" : "张三",    "title" : "工程师",    "desc" : "数据库管理，软件开发"}'</span> <span class="token punctuation">{</span>  <span class="token string">"_index"</span><span class="token keyword">:</span><span class="token string">"weather"</span>,  <span class="token string">"_type"</span><span class="token keyword">:</span><span class="token string">"person"</span>,  <span class="token string">"_id"</span><span class="token keyword">:</span><span class="token string">"1"</span>,  <span class="token string">"_version"</span>:2,  <span class="token string">"result"</span><span class="token keyword">:</span><span class="token string">"updated"</span>,  <span class="token string">"_shards"</span>:<span class="token punctuation">{</span><span class="token string">"total"</span>:2,<span class="token string">"successful"</span>:1,<span class="token string">"failed"</span>:0<span class="token punctuation">}</span>,  <span class="token string">"created"</span>:false<span class="token punctuation">}</span></code></pre></blockquote><p>上面代码中，我们将原始数据从”数据库管理”改成”数据库管理，软件开发”。 返回结果里面，有几个字段发生了变化。</p><blockquote><pre class=" language-bash"><code class="language-bash"><span class="token string">"_version"</span> <span class="token keyword">:</span> 2,<span class="token string">"result"</span> <span class="token keyword">:</span> <span class="token string">"updated"</span>,<span class="token string">"created"</span> <span class="token keyword">:</span> <span class="token boolean">false</span></code></pre></blockquote><p>可以看到，记录的 Id 没变，但是版本（version）从<code>1</code>变成<code>2</code>，操作类型（result）从<code>created</code>变成<code>updated</code>，<code>created</code>字段变成<code>false</code>，因为这次不是新建记录。</p><h3 id="返回所有记录"><a href="#返回所有记录" class="headerlink" title="返回所有记录"></a>返回所有记录</h3><p>使用 GET 方法，直接请求<code>/Index/Type/_search</code>，就会返回所有记录。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl <span class="token string">'localhost:9200/weather/person/_search'</span><span class="token punctuation">{</span>  <span class="token string">"took"</span>:2,  <span class="token string">"timed_out"</span>:false,  <span class="token string">"_shards"</span>:<span class="token punctuation">{</span><span class="token string">"total"</span>:5,<span class="token string">"successful"</span>:5,<span class="token string">"failed"</span>:0<span class="token punctuation">}</span>,  <span class="token string">"hits"</span>:<span class="token punctuation">{</span>    <span class="token string">"total"</span>:2,    <span class="token string">"max_score"</span>:1.0,    <span class="token string">"hits"</span>:<span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token string">"_index"</span><span class="token keyword">:</span><span class="token string">"weather"</span>,        <span class="token string">"_type"</span><span class="token keyword">:</span><span class="token string">"person"</span>,        <span class="token string">"_id"</span><span class="token keyword">:</span><span class="token string">"AV3qGfrC6jMbsbXb6k1p"</span>,        <span class="token string">"_score"</span>:1.0,        <span class="token string">"_source"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"user"</span><span class="token keyword">:</span> <span class="token string">"李四"</span>,          <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"工程师"</span>,          <span class="token string">"desc"</span><span class="token keyword">:</span> <span class="token string">"系统管理"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>,      <span class="token punctuation">{</span>        <span class="token string">"_index"</span><span class="token keyword">:</span><span class="token string">"weather"</span>,        <span class="token string">"_type"</span><span class="token keyword">:</span><span class="token string">"person"</span>,        <span class="token string">"_id"</span><span class="token keyword">:</span><span class="token string">"1"</span>,        <span class="token string">"_score"</span>:1.0,        <span class="token string">"_source"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"user"</span> <span class="token keyword">:</span> <span class="token string">"张三"</span>,          <span class="token string">"title"</span> <span class="token keyword">:</span> <span class="token string">"工程师"</span>,          <span class="token string">"desc"</span> <span class="token keyword">:</span> <span class="token string">"数据库管理，软件开发"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><p>上面代码中，返回结果的 <code>took</code>字段表示该操作的耗时（单位为毫秒），<code>timed_out</code>字段表示是否超时，<code>hits</code>字段表示命中的记录，里面子字段的含义如下。</p><blockquote><ul><li><code>total</code>：返回记录数，本例是2条。</li><li><code>max_score</code>：最高的匹配程度，本例是<code>1.0</code>。</li><li><code>hits</code>：返回的记录组成的数组。</li></ul></blockquote><p>返回的记录中，每条记录都有一个<code>_score</code>字段，表示匹配的程序，默认是按照这个字段降序排列。</p><h3 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h3><p>Elastic 的查询非常特别，使用自己的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl.html">查询语法</a>，要求 GET 请求带有数据体。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl <span class="token string">'localhost:9200/accounts/person/_search'</span>  -d <span class="token string">'{  "query" : { "match" : { "desc" : "软件" }}}'</span></code></pre></blockquote><p>上面代码使用 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl-match-query.html">Match 查询</a>，指定的匹配条件是<code>desc</code>字段里面包含”软件”这个词。返回结果如下。</p><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"took"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>  <span class="token string">"timed_out"</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string">"_shards"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"total"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"successful"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"failed"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"hits"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token string">"total"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"max_score"</span><span class="token punctuation">:</span><span class="token number">0.28582606</span><span class="token punctuation">,</span>    <span class="token string">"hits"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token string">"_index"</span><span class="token punctuation">:</span><span class="token string">"accounts"</span><span class="token punctuation">,</span>        <span class="token string">"_type"</span><span class="token punctuation">:</span><span class="token string">"person"</span><span class="token punctuation">,</span>        <span class="token string">"_id"</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"_score"</span><span class="token punctuation">:</span><span class="token number">0.28582606</span><span class="token punctuation">,</span>        <span class="token string">"_source"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"user"</span> <span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>          <span class="token string">"title"</span> <span class="token punctuation">:</span> <span class="token string">"工程师"</span><span class="token punctuation">,</span>          <span class="token string">"desc"</span> <span class="token punctuation">:</span> <span class="token string">"数据库管理，软件开发"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><p>Elastic 默认一次返回10条结果，可以通过<code>size</code>字段改变这个设置。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl <span class="token string">'localhost:9200/weather/person/_search'</span>  -d <span class="token string">'{  "query" : { "match" : { "desc" : "管理" }},  "size": 1}'</span></code></pre></blockquote><p>上面代码指定，每次只返回一条结果。</p><p>还可以通过<code>from</code>字段，指定位移。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl <span class="token string">'localhost:9200/weather/person/_search'</span>  -d <span class="token string">'{  "query" : { "match" : { "desc" : "管理" }},  "from": 1,  "size": 1}'</span></code></pre></blockquote><p>上面代码指定，从位置1开始（默认是从位置0开始），只返回一条结果。</p><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>如果有多个搜索关键字， Elastic 认为它们是<code>or</code>关系。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl <span class="token string">'localhost:9200/weather/person/_search'</span>  -d <span class="token string">'{  "query" : { "match" : { "desc" : "软件 系统" }}}'</span></code></pre></blockquote><p>上面代码搜索的是<code>软件 or 系统</code>。</p><p>如果要执行多个关键词的<code>and</code>搜索，必须使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl-bool-query.html">布尔查询</a>。</p><blockquote><pre class=" language-bash"><code class="language-bash">$ curl <span class="token string">'localhost:9200/weather/person/_search'</span>  -d <span class="token string">'{  "query": {    "bool": {      "must": [        { "match": { "desc": "软件" } },        { "match": { "desc": "系统" } }      ]    }  }}'</span></code></pre></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索引擎 </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List转Map之Collectors.toMap</title>
      <link href="2020/10/10/java/%E5%B0%8F%E6%8A%80%E5%B7%A7/List%E5%BF%AB%E9%80%9F%E8%BD%ACMap/"/>
      <url>2020/10/10/java/%E5%B0%8F%E6%8A%80%E5%B7%A7/List%E5%BF%AB%E9%80%9F%E8%BD%ACMap/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> jdk8<span class="token punctuation">.</span>stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * User: 李诗诚 * Date: 2020/10/10 * Time: 17:09 * Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListToMap</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">"Kreas"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"Marry"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"Timi"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//List 转 Map，值为对象：</span>        <span class="token comment" spellcheck="true">// Map&lt;Long,User> map = users.stream().collect(Collectors.toMap(User::getId,o->o));</span>        <span class="token comment" spellcheck="true">//List 转 Map，值为属性：</span>        <span class="token comment" spellcheck="true">// Map&lt;Long, String> map = users.stream().collect(Collectors.toMap(User::getId, User::getName));</span>        <span class="token comment" spellcheck="true">//List 转 Map，值为属性,且二次加工：</span>        <span class="token comment" spellcheck="true">//Map&lt;Long, String> map = users.stream().collect(Collectors.toMap(User::getId, o -> o.getName() + "_OK"));</span>        <span class="token comment" spellcheck="true">//Map KEY不能重复,(o1,o2)->o1,取排在前面的</span>        Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span>User<span class="token operator">></span> map <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">,</span>o<span class="token operator">-</span><span class="token operator">></span>o<span class="token punctuation">,</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>o1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map.get("</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">") = "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用户ID</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用户名称</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                    <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                    <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                    <span class="token string">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一.elasticsearch入门安装使用</title>
      <link href="2020/10/10/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/%E4%B8%80.elasticsearch%E5%85%A5%E9%97%A8%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
      <url>2020/10/10/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/elasticsearch/%E4%B8%80.elasticsearch%E5%85%A5%E9%97%A8%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>安装环境是centos7,由于kafka很多核心基于zookeeper特性实现,而zookeeper是java编写运行在JVM上,所以需要保证有java8以上的JDK环境</p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# cd /opt/[root@localhost opt]# lltotal 0drwxr-xr-x. 10 elsearch elsearch 167 Oct 12 09:30 elasticsearch-7.9.2drwxr-xr-x.  7 root     root     245 Oct 12 09:26 jdk1.8.0_191drwxr-xr-x.  7 root     root     101 Oct 12 09:26 kafka_2.12-2.6.0[root@localhost opt]## 1.添加新用户,es6不能用root用户启动[root@localhost opt]# adduser elsearch# 2.在root用户下将elasticsearch-7.9.2文件夹权限赋予给新建的elsearch用户[root@localhost opt]# chown -R elsearch:elsearch elasticsearch-7.9.2# 3.切换到新用户,启动es程序[root@localhost opt]# su elsearch[elsearch@localhost opt]$ cd elasticsearch-7.9.2/[elsearch@localhost elasticsearch-7.9.2]$ ./bin/elasticsearch# 在安装路径下的config/elasticsearch.yml文件中， # 添加 network.host: 0.0.0.0 表示所有用户可访问 即远程访问#安装中文分词库#进入 到/usr/elasticsearch/bin #执行  ./elasticsearch-plugin插件命令 安装插件./elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.2/elasticsearch-analysis-ik-7.9.2.zip</code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="新装es启动时，会遇到以下错误情况："><a href="#新装es启动时，会遇到以下错误情况：" class="headerlink" title="新装es启动时，会遇到以下错误情况："></a>新装es启动时，会遇到以下错误情况：</h3><blockquote><p>ERROR: [3] bootstrap checks failed<br>[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</p><p>编辑 /etc/security/limits.conf，追加以下内容；</p><ul><li>soft nofile 65536</li><li>hard nofile 65536</li></ul><p>[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p><p>编辑 /etc/sysctl.conf，追加以下内容：</p><p>vm.max_map_count=655360</p><p>保存后，执行：</p><p>sysctl -p</p><p>[3]: max number of threads [2048] for user [tongtech] is too low, increase to at least [4096]</p><p>错误原因：启动检查未通过elasticsearch用户的最大线程数太低</p><p>vim /etc/security/limits.d/90-nproc.conf 将2048改为4096或更大</p><p>[4]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</p><p>解决办法：</p><p>修改elasticsearch.yml </p><p>cluster.initial_master_nodes: [“node-1”]</p><p>这个的话，这里的node-1是上面一个默认的记得打开就可以了</p><p>[5]max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p><p>解决办法：</p><p>切换至root用户</p><p>su root</p><p>修改limits.d目录下的配置文件：</p><p>vi /etc/security/limits.d/90-nproc.conf</p><p>改为4096</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索引擎 </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一.ConditionalOnProperty</title>
      <link href="2020/10/10/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/%E4%B8%80.ConditionalOnProperty/"/>
      <url>2020/10/10/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/%E4%B8%80.ConditionalOnProperty/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><blockquote><p><strong>Spring Boot</strong>通过**@ConditionalOnProperty<strong>来控制</strong>Configuration**是否生效</p></blockquote><h2 id="2-说明"><a href="#2-说明" class="headerlink" title="2. 说明"></a>2. 说明</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>OnPropertyCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ConditionalOnProperty</span> <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组，获取对应property名称的值，与name不可同时使用  </span>    String <span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//property名称的前缀，可有可无  </span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组，property完整名称或部分名称（可与prefix组合使用，组成完整的property名称），与value不可同时使用  </span>    String <span class="token function">havingValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可与name组合使用，比较获取到的属性值与havingValue给定的值是否相同，相同才加载配置  </span>    <span class="token keyword">boolean</span> <span class="token function">matchIfMissing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//缺少该property时是否可以加载。如果为true，没有该property也会正常加载；反之报错  </span>    <span class="token keyword">boolean</span> <span class="token function">relaxedNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否可以松散匹配，至今不知道怎么使用的  </span><span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h2 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3. 使用方法"></a>3. 使用方法</h2><blockquote><p>通过其两个属性<strong>name</strong>以及<strong>havingValue</strong>来实现的，其中<strong>name</strong>用来从<strong>application.properties</strong>中读取某个属性值。<br> <strong>如果该值为空，则返回false</strong>;<br> <strong>如果值不为空，则将该值与havingValue指定的值进行比较，如果一样则返回true;否则返回false。</strong><br> <strong>如果返回值为false，则该configuration不生效；为true则生效。</strong></p></blockquote><h2 id="4-code"><a href="#4-code" class="headerlink" title="4. code"></a>4. code</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">//在application.properties配置"mf.assert"，对应的值为true</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">"mf"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"assert"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssertConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HelloServiceProperties helloServiceProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloService <span class="token function">helloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        HelloService helloService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helloService<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>helloServiceProperties<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> helloService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 注解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二.kafka入门理解</title>
      <link href="2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/"/>
      <url>2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="Kafka的基本介绍"><a href="#Kafka的基本介绍" class="headerlink" title="Kafka的基本介绍"></a>Kafka的基本介绍</h3><p>Kafka是最初由Linkedin公司开发，是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的分布式日志系统（也可以当做MQ系统），常见可以用于web/nginx日志、访问日志，消息服务等等，Linkedin于2010年贡献给了Apache基金会并成为顶级开源项目。</p><p>主要应用场景是：日志收集系统和消息系统。</p><h3 id="Kafka专用术语："><a href="#Kafka专用术语：" class="headerlink" title="Kafka专用术语："></a>Kafka专用术语：</h3><ul><li>Broker：消息中间件处理结点，一个Kafka节点就是一个broker，多个broker可以组成一个Kafka集群。</li><li>Topic：一类消息或者叫主题，Kafka集群能够同时负责多个topic的分发。</li><li>Partition：topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列。</li><li>Segment：partition物理上由多个segment组成。</li><li>offset：每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中。partition中的每个消息都有一个连续的序列号叫做offset，用于partition唯一标识一条消息。</li><li>Producer：负责发布消息到Kafka broker。</li><li>Consumer：消息消费者，向Kafka broker读取消息的客户端。</li><li>Consumer Group：每个Consumer属于一个特定的Consumer Group。</li></ul><h3 id="Kafka的设计原理分析"><a href="#Kafka的设计原理分析" class="headerlink" title="Kafka的设计原理分析"></a>Kafka的设计原理分析</h3><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/image-20201010145717763.png" alt="image-20201010145717763"></p><p>一个典型的kafka集群中包含若干producer，若干broker，若干consumer，以及一个Zookeeper集群。</p><p>Kafka通过Zookeeper管理集群配置，选举leader，以及在consumer group发生变化时进行rebalance。producer使用push模式将消息发布到broker，consumer使用pull模式从broker订阅并消费消息。</p><h3 id="Kafka数据传输的事务特点"><a href="#Kafka数据传输的事务特点" class="headerlink" title="Kafka数据传输的事务特点"></a>Kafka数据传输的事务特点</h3><p>at most once：最多一次，这个和JMS中”非持久化”消息类似，发送一次，无论成败，将不会重发。消费者fetch消息，然后保存offset，然后处理消息；当client保存offset之后，但是在消息处理过程中出现了异常，导致部分消息未能继续处理。那么此后”未处理”的消息将不能被fetch到，这就是”at most once”。</p><p>at least once：消息至少发送一次，如果消息未能接受成功，可能会重发，直到接收成功。消费者fetch消息，然后处理消息，然后保存offset。如果消息处理成功之后，但是在保存offset阶段zookeeper异常导致保存操作未能执行成功，这就导致接下来再次fetch时可能获得上次已经处理过的消息，这就是”at least once”，原因offset没有及时的提交给zookeeper，zookeeper恢复正常还是之前offset状态。</p><p>exactly once：消息只会发送一次。kafka中并没有严格的去实现（基于2阶段提交），我们认为这种策略在kafka中是没有必要的。</p><p>通常情况下”at-least-once”是我们首选。</p><h3 id="Kafka消息存储格式"><a href="#Kafka消息存储格式" class="headerlink" title="Kafka消息存储格式"></a>Kafka消息存储格式</h3><p><strong>Topic &amp; Partition</strong></p><p>一个topic可以认为一个一类消息，每个topic将被分成多个partition，每个partition在存储层面是append log文件。</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803142135185" alt="图片描述"></p><p>在Kafka文件存储中，同一个topic下有多个不同partition，每个partition为一个目录，partiton命名规则为topic名称+有序序号，第一个partiton序号从0开始，序号最大值为partitions数量减1。</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803142219160" alt="图片描述"></p><ul><li>每个partion（目录）相当于一个巨型文件被平均分配到多个大小相等segment（段）数据文件中。但每个段segment file消息数量不一定相等，这种特性方便old segment file快速被删除。</li><li>每个partiton只需要支持顺序读写就行了，segment文件生命周期由服务端配置参数决定。</li></ul><p>这样做的好处就是能快速删除无用文件，有效提高磁盘利用率。</p><ul><li>segment file组成：由2大部分组成，分别为index file和data file，此2个文件一一对应，成对出现，后缀”.index”和“.log”分别表示为segment索引文件、数据文件。</li><li>segment文件命名规则：partion全局的第一个segment从0开始，后续每个segment文件名为上一个segment文件最后一条消息的offset值。数值最大为64位long大小，19位数字字符长度，没有数字用0填充。</li></ul><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803142330885" alt="图片描述"></p><p>segment中index与data file对应关系物理结构如下：</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803142353099" alt="图片描述"></p><p>上图中索引文件存储大量元数据，数据文件存储大量消息，索引文件中元数据指向对应数据文件中message的物理偏移地址。</p><p>其中以索引文件中元数据3,497为例，依次在数据文件中表示第3个message（在全局partiton表示第368772个message），以及该消息的物理偏移地址为497。</p><p>了解到segment data file由许多message组成，下面详细说明message物理结构如下：</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803142529576" alt="图片描述"></p><p>参数说明：</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803142601663" alt="图片描述"></p><p><strong>副本（replication）策略</strong></p><p>Kafka的高可靠性的保障来源于其健壮的副本（replication）策略。</p><p><strong>1) 数据同步</strong></p><p>kafka在0.8版本前没有提供Partition的Replication机制，一旦Broker宕机，其上的所有Partition就都无法提供服务，而Partition又没有备份数据，数据的可用性就大大降低了。所以0.8后提供了Replication机制来保证Broker的failover。</p><p>引入Replication之后，同一个Partition可能会有多个Replica，而这时需要在这些Replication之间选出一个Leader，Producer和Consumer只与这个Leader交互，其它Replica作为Follower从Leader中复制数据。</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803142704015" alt="图片描述"></p><p><strong>2) 副本放置策略</strong></p><p>为了更好的做负载均衡，Kafka尽量将所有的Partition均匀分配到整个集群上。Kafka分配Replica的算法如下：</p><ul><li>将所有存活的N个Brokers和待分配的Partition排序</li><li>将第i个Partition分配到第(i mod n)个Broker上，这个Partition的第一个Replica存在于这个分配的Broker上，并且会作为partition的优先副本</li><li>将第i个Partition的第j个Replica分配到第((i + j) mod n)个Broker上</li></ul><p>假设集群一共有4个brokers，一个topic有4个partition，每个Partition有3个副本。下图是每个Broker上的副本分配情况。</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803142856639" alt="图片描述"></p><p><strong>3) 同步策略</strong></p><p>Producer在发布消息到某个Partition时，先通过ZooKeeper找到该Partition的Leader，然后无论该Topic的Replication Factor为多少，Producer只将该消息发送到该Partition的Leader。Leader会将该消息写入其本地Log。每个Follower都从Leader pull数据。这种方式上，Follower存储的数据顺序与Leader保持一致。Follower在收到该消息并写入其Log后，向Leader发送ACK。一旦Leader收到了ISR中的所有Replica的ACK，该消息就被认为已经commit了，Leader将增加HW并且向Producer发送ACK。</p><p>为了提高性能，每个Follower在接收到数据后就立马向Leader发送ACK，而非等到数据写入Log中。因此，对于已经commit的消息，Kafka只能保证它被存于多个Replica的内存中，而不能保证它们被持久化到磁盘中，也就不能完全保证异常发生后该条消息一定能被Consumer消费。</p><p>Consumer读消息也是从Leader读取，只有被commit过的消息才会暴露给Consumer。</p><p>Kafka Replication的数据流如下图所示：</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803143127773" alt="图片描述"></p><p>对于Kafka而言，定义一个Broker是否“活着”包含两个条件：</p><ul><li>一是它必须维护与ZooKeeper的session（这个通过ZooKeeper的Heartbeat机制来实现）。</li><li>二是Follower必须能够及时将Leader的消息复制过来，不能“落后太多”。</li></ul><p>Leader会跟踪与其保持同步的Replica列表，该列表称为ISR（即in-sync Replica）。如果一个Follower宕机，或者落后太多，Leader将把它从ISR中移除。这里所描述的“落后太多”指Follower复制的消息落后于Leader后的条数超过预定值或者Follower超过一定时间未向Leader发送fetch请求。</p><p>Kafka只解决fail/recover，一条消息只有被ISR里的所有Follower都从Leader复制过去才会被认为已提交。这样就避免了部分数据被写进了Leader，还没来得及被任何Follower复制就宕机了，而造成数据丢失（Consumer无法消费这些数据）。而对于Producer而言，它可以选择是否等待消息commit。这种机制确保了只要ISR有一个或以上的Follower，一条被commit的消息就不会丢失。</p><p><strong>4) leader选举</strong></p><p>Leader选举本质上是一个分布式锁，有两种方式实现基于ZooKeeper的分布式锁：</p><ul><li>节点名称唯一性：多个客户端创建一个节点，只有成功创建节点的客户端才能获得锁</li><li>临时顺序节点：所有客户端在某个目录下创建自己的临时顺序节点，只有序号最小的才获得锁</li></ul><p>Majority Vote的选举策略和ZooKeeper中的Zab选举是类似的，实际上ZooKeeper内部本身就实现了少数服从多数的选举策略。kafka中对于Partition的leader副本的选举采用了第一种方法：为Partition分配副本，指定一个ZNode临时节点，第一个成功创建节点的副本就是Leader节点，其他副本会在这个ZNode节点上注册Watcher监听器，一旦Leader宕机，对应的临时节点就会被自动删除，这时注册在该节点上的所有Follower都会收到监听器事件，它们都会尝试创建该节点，只有创建成功的那个follower才会成为Leader（ZooKeeper保证对于一个节点只有一个客户端能创建成功），其他follower继续重新注册监听事件。</p><p><strong>Kafka消息分组，消息消费原理</strong></p><p>同一Topic的一条消息只能被同一个Consumer Group内的一个Consumer消费，但多个Consumer Group可同时消费这一消息。</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803143338094" alt="图片描述"></p><p>这是Kafka用来实现一个Topic消息的广播（发给所有的Consumer）和单播（发给某一个Consumer）的手段。一个Topic可以对应多个Consumer Group。如果需要实现广播，只要每个Consumer有一个独立的Group就可以了。要实现单播只要所有的Consumer在同一个Group里。用Consumer Group还可以将Consumer进行自由的分组而不需要多次发送消息到不同的Topic。</p><p><strong>Push vs. Pull</strong></p><p>作为一个消息系统，Kafka遵循了传统的方式，选择由Producer向broker push消息并由Consumer从broker pull消息。</p><p>push模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。push模式的目标是尽可能以最快速度传递消息，但是这样很容易造成Consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而pull模式则可以根据Consumer的消费能力以适当的速率消费消息。</p><p>对于Kafka而言，pull模式更合适。pull模式可简化broker的设计，Consumer可自主控制消费消息的速率，同时Consumer可以自己控制消费方式——即可批量消费也可逐条消费，同时还能选择不同的提交方式从而实现不同的传输语义。</p><h3 id="Kafak顺序写入与数据读取"><a href="#Kafak顺序写入与数据读取" class="headerlink" title="Kafak顺序写入与数据读取"></a>Kafak顺序写入与数据读取</h3><p>生产者（producer）是负责向Kafka提交数据的，Kafka会把收到的消息都写入到硬盘中，它绝对不会丢失数据。为了优化写入速度Kafak采用了两个技术，顺序写入和MMFile。</p><p><strong>顺序写入</strong></p><p>因为硬盘是机械结构，每次读写都会寻址，写入，其中寻址是一个“机械动作”，它是最耗时的。所以硬盘最“讨厌”随机I/O，最喜欢顺序I/O。为了提高读写硬盘的速度，Kafka就是使用顺序I/O。</p><p>每条消息都被append到该Partition中，属于顺序写磁盘，因此效率非常高。</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803143537953" alt="图片描述"></p><p>对于传统的message queue而言，一般会删除已经被消费的消息，而Kafka是不会删除数据的，它会把所有的数据都保留下来，每个消费者（Consumer）对每个Topic都有一个offset用来表示读取到了第几条数据。</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803143609250" alt="图片描述"></p><p>即便是顺序写入硬盘，硬盘的访问速度还是不可能追上内存。所以Kafka的数据并不是实时的写入硬盘，它充分利用了现代操作系统分页存储来利用内存提高I/O效率。</p><p>在Linux Kernal 2.2之后出现了一种叫做“零拷贝(zero-copy)”系统调用机制，就是跳过“用户缓冲区”的拷贝，建立一个磁盘空间和内存空间的直接映射，数据不再复制到“用户态缓冲区”系统上下文切换减少2次，可以提升一倍性能。</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803143852495" alt="图片描述"></p><p>通过mmap，进程像读写硬盘一样读写内存（当然是虚拟机内存）。使用这种方式可以获取很大的I/O提升，省去了用户空间到内核空间复制的开销（调用文件的read会把数据先放到内核空间的内存中，然后再复制到用户空间的内存中。）</p><p><strong>消费者（读取数据）</strong></p><p>试想一下，一个Web Server传送一个静态文件，如何优化？答案是zero copy。传统模式下我们从硬盘读取一个文件是这样的。</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803143918190" alt="图片描述"></p><p>先复制到内核空间（read是系统调用，放到了DMA，所以用内核空间），然后复制到用户空间（1、2）；从用户空间重新复制到内核空间（你用的socket是系统调用，所以它也有自己的内核空间），最后发送给网卡（3、4）。</p><p><img src="/2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%BA%8C.kafka%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3/20170803143938300" alt="图片描述"></p><p>Zero Copy中直接从内核空间（DMA的）到内核空间（Socket的），然后发送网卡。这个技术非常普遍，Nginx也是用的这种技术。</p><p>实际上，Kafka把所有的消息都存放在一个一个的文件中，当消费者需要数据的时候Kafka直接把“文件”发送给消费者。当不需要把整个文件发出去的时候，Kafka通过调用Zero Copy的sendfile这个函数，这个函数包括：</p><ul><li>out_fd作为输出（一般及时socket的句柄）</li><li>in_fd作为输入文件句柄</li><li>off_t表示in_fd的偏移（从哪里开始读取）</li><li>size_t表示读取多少个 </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息中间件 </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一.kafka入门安装使用</title>
      <link href="2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%B8%80.kafka%E5%85%A5%E9%97%A8%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
      <url>2020/10/10/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/%E4%B8%80.kafka%E5%85%A5%E9%97%A8%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>安装环境是centos7,由于kafka很多核心基于zookeeper特性实现,而zookeeper是java编写运行在JVM上,所以需要保证有java8以上的JDK环境</p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>  <a href="http://kafka.apache.org/downloads.html">http://kafka.apache.org/downloads.html</a></p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><pre class=" language-shell"><code class="language-shell">#1.解压kafka[root@localhost ~]# tar -xzvf kafka_2.12-2.6.0.tgz[root@localhost ~]# lsanaconda-ks.cfg  kafka_2.12-2.6.0  kafka_2.12-2.6.0.tgz#2.进入文件目录 启动zookeeper[root@localhost ~]# cd kafka_2.12-2.6.0[root@localhost kafka_2.12-2.6.0]# bin/zookeeper-server-start.sh config/zookeeper.properties#3.修改server.properties的advertised.listeners以供java API调用advertised.listeners=PLAINTEXT://192.168.20.151:9092#4.新开终端,启动kafka[root@localhost ~]# cd kafka_2.12-2.6.0[root@localhost kafka_2.12-2.6.0]# bin/kafka-server-start.sh config/server.properties#启动生产者    bin/kafka-console-producer.sh --broker-list localhost:9092 --topic CCTV#启动消费者    bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic CCTV</code></pre><h2 id="配置讲解"><a href="#配置讲解" class="headerlink" title="配置讲解"></a>配置讲解</h2><table><thead><tr><th>参数</th><th>说明(解释)</th></tr></thead><tbody><tr><td>broker.id =0</td><td>每一个broker在集群中的唯一表示，要求是正数。当该服务器的IP地址发生改变时，broker.id没有变化，则不会影响consumers的消息情况</td></tr><tr><td>log.dirs=/data/kafka-logs</td><td>kafka数据的存放地址，多个地址的话用逗号分割/data/kafka-logs-1，/data/kafka-logs-2</td></tr><tr><td>port =9092</td><td>broker server服务端口</td></tr><tr><td>message.max.bytes =6525000</td><td>表示消息体的最大大小，单位是字节</td></tr><tr><td>num.network.threads =4</td><td>broker处理消息的最大线程数，一般情况下不需要去修改</td></tr><tr><td>num.io.threads =8</td><td>broker处理磁盘IO的线程数，数值应该大于你的硬盘数</td></tr><tr><td>background.threads =4</td><td>一些后台任务处理的线程数，例如过期消息文件的删除等，一般情况下不需要去做修改</td></tr><tr><td>queued.max.requests =500</td><td>等待IO线程处理的请求队列最大数，若是等待IO的请求超过这个数值，那么会停止接受外部消息，应该是一种自我保护机制。</td></tr><tr><td>host.name</td><td>broker的主机地址，若是设置了，那么会绑定到这个地址上，若是没有，会绑定到所有的接口上，并将其中之一发送到ZK，一般不设置</td></tr><tr><td>socket.send.buffer.bytes=100*1024</td><td>socket的发送缓冲区，socket的调优参数SO_SNDBUFF</td></tr><tr><td>socket.receive.buffer.bytes =100*1024</td><td>socket的接受缓冲区，socket的调优参数SO_RCVBUFF</td></tr><tr><td>socket.request.max.bytes =100<em>1024</em>1024</td><td>socket请求的最大数值，防止serverOOM，message.max.bytes必然要小于socket.request.max.bytes，会被topic创建时的指定参数覆盖</td></tr><tr><td>log.segment.bytes =1024<em>1024</em>1024</td><td>topic的分区是以一堆segment文件存储的，这个控制每个segment的大小，会被topic创建时的指定参数覆盖</td></tr><tr><td>log.roll.hours =24*7</td><td>这个参数会在日志segment没有达到log.segment.bytes设置的大小，也会强制新建一个segment会被 topic创建时的指定参数覆盖</td></tr><tr><td>log.cleanup.policy = delete</td><td>日志清理策略选择有：delete和compact主要针对过期数据的处理，或是日志文件达到限制的额度，会被 topic创建时的指定参数覆盖</td></tr><tr><td>log.retention.minutes=3days</td><td>数据存储的最大时间超过这个时间会根据log.cleanup.policy设置的策略处理数据，也就是消费端能够多久去消费数据log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行删除，会被topic创建时的指定参数覆盖</td></tr><tr><td>log.retention.bytes=-1</td><td>topic每个分区的最大文件大小，一个topic的大小限制 =分区数*log.retention.bytes。-1没有大小限log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行删除，会被topic创建时的指定参数覆盖</td></tr><tr><td>log.retention.check.interval.ms=5minutes</td><td>文件大小检查的周期时间，是否处罚 log.cleanup.policy中设置的策略</td></tr><tr><td>log.cleaner.enable=<strong>false</strong></td><td>是否开启日志压缩</td></tr><tr><td>log.cleaner.threads = 2</td><td>日志压缩运行的线程数</td></tr><tr><td>log.cleaner.io.max.bytes.per.second=None</td><td>日志压缩时候处理的最大大小</td></tr><tr><td>log.cleaner.dedupe.buffer.size=500<em>1024</em>1024</td><td>日志压缩去重时候的缓存空间，在空间允许的情况下，越大越好</td></tr><tr><td>log.cleaner.io.buffer.size=512*1024</td><td>日志清理时候用到的IO块大小一般不需要修改</td></tr><tr><td>log.cleaner.io.buffer.load.factor =0.9</td><td>日志清理中hash表的扩大因子一般不需要修改</td></tr><tr><td>log.cleaner.backoff.ms =15000</td><td>检查是否处罚日志清理的间隔</td></tr><tr><td>log.cleaner.min.cleanable.ratio=0.5</td><td>日志清理的频率控制，越大意味着更高效的清理，同时会存在一些空间上的浪费，会被topic创建时的指定参数覆盖</td></tr><tr><td>log.cleaner.delete.retention.ms =1day</td><td>对于压缩的日志保留的最长时间，也是客户端消费消息的最长时间，同log.retention.minutes的区别在于一个控制未压缩数据，一个控制压缩后的数据。会被topic创建时的指定参数覆盖</td></tr><tr><td>log.index.size.max.bytes =10<em>1024</em>1024</td><td>对于segment日志的索引文件大小限制，会被topic创建时的指定参数覆盖</td></tr><tr><td>log.index.interval.bytes =4096</td><td>当执行一个fetch操作后，需要一定的空间来扫描最近的offset大小，设置越大，代表扫描速度越快，但是也更好内存，一般情况下不需要搭理这个参数</td></tr><tr><td>log.flush.interval.messages=None</td><td>log文件”sync”到磁盘之前累积的消息条数,因为磁盘IO操作是一个慢操作,但又是一个”数据可靠性”的必要手段,所以此参数的设置,需要在**”<strong><strong>数据可靠性</strong></strong>“<strong>与”性能”之间做必要的权衡.如果此值过大,将会导致每次”fsync”的时间较长(IO阻塞),如果此值过小,将会导致</strong>“fsync”**的次数较多,这也意味着整体的client请求有一定的延迟.物理server故障,将会导致没有fsync的消息丢失.</td></tr><tr><td>log.flush.scheduler.interval.ms =3000</td><td>检查是否需要固化到硬盘的时间间隔</td></tr><tr><td>log.flush.interval.ms = None</td><td>仅仅通过interval来控制消息的磁盘写入时机,是不足的.此参数用于控制**”fsync”**的时间间隔,如果消息量始终没有达到阀值,但是离上一次磁盘同步的时间间隔达到阀值,也将触发.</td></tr><tr><td>log.delete.delay.ms =60000</td><td>文件在索引中清除后保留的时间一般不需要去修改</td></tr><tr><td>log.flush.offset.checkpoint.interval.ms =60000</td><td>控制上次固化硬盘的时间点，以便于数据恢复一般不需要去修改</td></tr><tr><td>auto.create.topics.enable =<strong>true</strong></td><td>是否允许自动创建topic，若是<strong>false</strong>，就需要通过命令创建topic</td></tr><tr><td><strong>default</strong>.replication.factor =1</td><td>是否允许自动创建topic，若是<strong>false</strong>，就需要通过命令创建topic</td></tr><tr><td>num.partitions =1</td><td>每个topic的分区个数，若是在topic创建时候没有指定的话会被topic创建时的指定参数覆盖</td></tr><tr><td></td><td></td></tr><tr><td>以下是kafka中Leader,replicas配置参数</td><td></td></tr><tr><td>controller.socket.timeout.ms =30000</td><td>partition leader与replicas之间通讯时,socket的超时时间</td></tr><tr><td>controller.message.queue.size=10</td><td>partition leader与replicas数据同步时,消息的队列尺寸</td></tr><tr><td>replica.lag.time.max.ms =10000</td><td>replicas响应partition leader的最长等待时间，若是超过这个时间，就将replicas列入ISR(in-sync replicas)，并认为它是死的，不会再加入管理中</td></tr><tr><td>replica.lag.max.messages =4000</td><td>如果follower落后与leader太多,将会认为此follower[或者说partition relicas]已经失效##通常,在follower与leader通讯时,因为网络延迟或者链接断开,总会导致replicas中消息同步滞后##如果消息之后太多,leader将认为此follower网络延迟较大或者消息吞吐能力有限,将会把此replicas迁移##到其他follower中.##在broker数量较少,或者网络不足的环境中,建议提高此值.</td></tr><tr><td>replica.socket.timeout.ms=30*1000</td><td>follower与leader之间的socket超时时间</td></tr><tr><td>replica.socket.receive.buffer.bytes=64*1024</td><td>leader复制时候的socket缓存大小</td></tr><tr><td>replica.fetch.max.bytes =1024*1024</td><td>replicas每次获取数据的最大大小</td></tr><tr><td>replica.fetch.wait.max.ms =500</td><td>replicas同leader之间通信的最大等待时间，失败了会重试</td></tr><tr><td>replica.fetch.min.bytes =1</td><td>fetch的最小数据尺寸,如果leader中尚未同步的数据不足此值,将会阻塞,直到满足条件</td></tr><tr><td>num.replica.fetchers=1</td><td>leader进行复制的线程数，增大这个数值会增加follower的IO</td></tr><tr><td>replica.high.watermark.checkpoint.interval.ms =5000</td><td>每个replica检查是否将最高水位进行固化的频率</td></tr><tr><td>controlled.shutdown.enable =<strong>false</strong></td><td>是否允许控制器关闭broker ,若是设置为<strong>true</strong>,会关闭所有在这个broker上的leader，并转移到其他broker</td></tr><tr><td>controlled.shutdown.max.retries =3</td><td>控制器关闭的尝试次数</td></tr><tr><td>controlled.shutdown.retry.backoff.ms =5000</td><td>每次关闭尝试的时间间隔</td></tr><tr><td>leader.imbalance.per.broker.percentage =10</td><td>leader的不平衡比例，若是超过这个数值，会对分区进行重新的平衡</td></tr><tr><td>leader.imbalance.check.interval.seconds =300</td><td>检查leader是否不平衡的时间间隔</td></tr><tr><td>offset.metadata.max.bytes</td><td>客户端保留offset信息的最大空间大小</td></tr><tr><td>kafka中zookeeper参数配置</td><td></td></tr><tr><td>zookeeper.connect = localhost:2181</td><td>zookeeper集群的地址，可以是多个，多个之间用逗号分割hostname1:port1,hostname2:port2,hostname3:port3</td></tr><tr><td>zookeeper.session.timeout.ms=6000</td><td>ZooKeeper的最大超时时间，就是心跳的间隔，若是没有反映，那么认为已经死了，不易过大</td></tr><tr><td>zookeeper.connection.timeout.ms =6000</td><td>ZooKeeper的连接超时时间</td></tr><tr><td>zookeeper.sync.time.ms =2000</td><td>ZooKeeper集群中leader和follower之间的同步实际那</td></tr></tbody></table><h2 id="JAVA-API测试"><a href="#JAVA-API测试" class="headerlink" title="JAVA API测试"></a>JAVA API测试</h2><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kafka-clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> kafka<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>ConsumerRecord<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>ConsumerRecords<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>KafkaConsumer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>KafkaProducer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>Producer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerRecord<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * User: 李诗诚 * Date: 2020/10/10 * Time: 11:57 * Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String KAFKA_SERVERS <span class="token operator">=</span> <span class="token string">"192.168.20.151:9092"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                KafkaTest<span class="token punctuation">.</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"生产者"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                KafkaTest<span class="token punctuation">.</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"消费者"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生产者,生产数据到kafka中     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//broker地址</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> KAFKA_SERVERS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//请求时候需要验证</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"acks"</span><span class="token punctuation">,</span> <span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//请求失败时候需要重试</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"retries"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//内存缓存区大小</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"buffer.memory"</span><span class="token punctuation">,</span> <span class="token number">33554432</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定消息key序列化方式</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.serializer"</span><span class="token punctuation">,</span>                <span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定消息本身的序列化方式</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.serializer"</span><span class="token punctuation">,</span>                <span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Producer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"CCTV"</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ddddddd "</span> <span class="token operator">+</span> count <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 消费者,从指定kafka中获取数据进行消费     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> KAFKA_SERVERS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//每个消费者分配独立的组号</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"group.id"</span><span class="token punctuation">,</span> <span class="token string">"test4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//不同的组，可消费同一个topic的数据</span>        <span class="token comment" spellcheck="true">//若分区数大于1，则可以多线程，或集群消费数据</span>        <span class="token comment" spellcheck="true">//如果value合法，则自动提交偏移量</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"enable.auto.commit"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置多久一次更新被消费消息的偏移量</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"auto.commit.interval.ms"</span><span class="token punctuation">,</span> <span class="token string">"1000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置会话响应的时间，超过这个时间kafka可以选择放弃消费或者消费下一条消息</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"session.timeout.ms"</span><span class="token punctuation">,</span> <span class="token string">"30000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.deserializer"</span><span class="token punctuation">,</span>                <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.deserializer"</span><span class="token punctuation">,</span>                <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KafkaConsumer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"CCTV"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> record <span class="token operator">:</span> records<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// print the offset,key and value for the consumer records.</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"offset = %d, key = %s, value = %s\n"</span><span class="token punctuation">,</span>                        record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息中间件 </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用操作</title>
      <link href="2020/10/09/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/git/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>2020/10/09/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/git/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="拉取指定分支项目"><a href="#拉取指定分支项目" class="headerlink" title="拉取指定分支项目"></a>拉取指定分支项目</h2><p><strong><code>git clone -b 想要拉取的分支名 xxx(URL) 文件名</code></strong></p><blockquote><p>如果未指定 <strong>文件名</strong>，则默认为 GitLab 上的项目名。</p></blockquote><hr><h2 id="分步版本："><a href="#分步版本：" class="headerlink" title="分步版本："></a>分步版本：</h2><h3 id="拉取项目"><a href="#拉取项目" class="headerlink" title="拉取项目"></a>拉取项目</h3><p>首先，进入到想要拉取分支的 <strong>项目</strong> 中 （首页为 <code>master</code> 分支）</p><p>点击上图中标注出来的 <strong>复制</strong> （复制 URL 到剪贴板）按钮复制路径</p><p>打开本地终端，进入到想把项目存放的 <strong>目录</strong>，<code>git clone xxx</code> ( xxx 为刚刚复制的 URL)</p><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p>使用 <code>git clone xxx</code> 命令后，系统会自动创建项目文件夹</p><p>进入 <strong>项目文件夹目录</strong>，此时所处分支为 <code>master</code>分支</p><p><code>git checkout -b 分支名</code> 新建分支（分支名为 想要拉取的 <strong>指定分支的</strong> 分支名），然后此时系统会自动切换为新建的这个分支</p><p><code>git pull</code> 拉取分支，更新分支内容</p><p>此时会提示让关联分支，按照提示内容输入命令 <code>git branch --set-upstream-to=origin/新建的那个分支名</code></p><p>重新 <code>git pull</code></p><p>此时指定分支上的内容就获取完毕。</p><blockquote><p><strong>git 命令</strong>：</p><ul><li><p><code>git checkout -b 分支名</code>：新建并切换到新分支。</p></li><li><p><code>git branch</code>: 查看当前分支。</p></li><li><p><code>git checkout 分支名</code>：切换分支（已有分支）。</p></li><li><p><code>git branch -d 分支名</code>：删除分支。</p></li><li><p><code>git pull</code>：拉取分支最新内容。</p></li><li><p><code>git merge develop</code>：将本分支内容合并到 develop 分支上。</p></li><li><p><code>git reset --hard origin/当前分支名</code>：将当前分支本地编辑的所有内容舍弃。</p></li></ul><p>  提交的时候：</p><ul><li><p><code>git add .</code></p></li><li><p><code>git commit -m "描述提交的内容"</code></p></li><li><p><code>git push</code></p></li></ul></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制工具 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7常用操作</title>
      <link href="2020/10/09/centos/Centos7%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>2020/10/09/centos/Centos7%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th></th><th></th></tr></thead><tbody><tr><td>ip add</td><td></td><td>查看系统当前IP地址</td></tr><tr><td>nmtui</td><td></td><td>调出系统配置修改窗口</td></tr><tr><td>ps -ef | grep xxx</td><td></td><td>查询名称为xxx的进程信息</td></tr><tr><td>kill -9 2382</td><td></td><td>杀死进程号为2382的进程</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
